Nagrestconf README
==================

++++
<link rel="shortcut icon" href="http://www.smorg.co.uk/favicon.ico?v=2" />
<style type="text/css">
body {
    margin-top: 50px;
}
.navbar {
    box-shadow: 0 3px 3px rgba(46, 46, 46, 0.7);
    opacity: 0.95;
}
.navbar-fixed-top {
    top: 0;
}
.navbar-fixed-top, .navbar-fixed-bottom {
    left: 0;
    margin-bottom: 0;
    position: fixed;
    right: 0;
    z-index: 1030;
}
.navbar {
    color: #999999;
}
.navbar {
    margin-bottom: 18px;
    overflow: visible;
}

.navbar-fixed-top .navbar-inner, .navbar-fixed-bottom .navbar-inner {
    border-radius: 0 0 0 0;
    padding-left: 0;
    padding-right: 0;
}
.navbar-inner {
    background-color: #2C2C2C;
    background-image: -moz-linear-gradient(center top , #333333, #222222);
    background-repeat: repeat-x;
    border-radius: 4px 4px 4px 4px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.25), 0 -1px 0 rgba(0, 0, 0, 0.1) inset;
    padding-left: 20px;
    padding-right: 20px;
}
.container:after {
    clear: both;
}
.container:before, .container:after {
    content: "";
    display: table;
}
.container:before, .container:after {
    content: "";
    display: table;
}
.navbar .container {
    width: auto;
}
.container {
    margin-left: auto;
    margin-right: auto;
}
.navbar .brand {
    color: #FFFFFF;
    display: block;
    float: left;
    font-size: 20px;
    font-weight: 200;
    line-height: 1;
    /* margin-left: -20px; */
    padding: 8px 20px 12px;
}
a {
    color: #0088CC;
    text-decoration: none;
}
.pull-right {
    float: right;
}
.navbar-search {
    float: left;
    margin-bottom: 0;
    margin-top: 6px;
    position: relative;
}
form {
    margin: 0 0 18px;
}
.navbar .nav {
    display: block;
    float: left;
    left: 0;
    margin: 0 10px 0 0;
    position: relative;
}
.nav {
    list-style: none outside none;
    margin-bottom: 18px;
    margin-left: 0;
}
ul {
    list-style: disc outside none;
}
ul, ol {
    margin: 0 0 9px 25px;
    padding: 0;
}
.navbar .nav > li {
    display: block;
    float: left;
}
li {
    line-height: 18px;
}
.navbar li.navbar-search-link {
    display: none;
}

.navbar .nav {
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    font-size: 13px;
}
.navbar .nav > li > p {
    color: #999999;
    float: none;
    font-weight: bold;
    line-height: 19px;
    margin-bottom: 0px;
    padding: 10px 10px 11px;
    text-decoration: none;
    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
}
.navbar .nav > li > a {
    color: #999999;
    float: none;
    line-height: 19px;
    padding: 10px 10px 11px;
    text-decoration: none;
    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
}
.navbar .nav > li > a:hover {
    background-color: transparent;
    color: #FFFFFF;
    text-decoration: none;
}
.navbar .nav .active > a, .navbar .nav .active > a:hover {
    background-color: #222222;
    color: #FFFFFF;
    text-decoration: none;
}
.nav > li > a {
    display: block;
}
.navbar-search .search-query {
    -moz-transition: none 0s ease 0s;
    background-color: #626262;
    border: 1px solid #151515;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1) inset, 0 1px 0 rgba(255, 255, 255, 0.15);
    color: #FFFFFF;
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    font-size: 13px;
    font-weight: normal;
    line-height: 1;
    padding: 4px 9px;
}
.navbar-search .search-query:-moz-placeholder {
    color: #CCCCCC;
}
.navbar-search .search-query:focus, .navbar-search .search-query.focused {
    background-color: #FFFFFF;
    border: 0 none;
    box-shadow: 0 0 3px rgba(0, 0, 0, 0.15);
    color: #333333;
    outline: 0 none;
    padding: 5px 10px;
    text-shadow: 0 1px 0 #FFFFFF;
}
</style>
<div class="navbar navbar-fixed-top" style="">
    <div class="navbar-inner">
        <div class="container">
            <a href="/" class="brand"><span class="logo-text">Smorg.co.uk</span></a>
<!--
            <form class="navbar-search pull-right" action="/search">
                <input type="text" placeholder="Search" class="search-query" name="q">
            </form>
-->
            <div class="pull-right">
                <ul class="nav">
                    <li><p>See Nagrestconf on:</p></li>
                    <li><a href="http://blogger.smorg.co.uk/2012/07/nagrestconf-on-raspberry-pi.html">Blog</a></li>
                    <li><a href="http://sourceforge.net/projects/nagrestconf/">Sourceforge</a></li>
                    <li><a href="http://exchange.nagios.org/directory/Addons/APIs/Nagrestconf/details">Nagios Exchange</a></li>
<!--
                    <li class="navbar-search-link"><a href="/search">Search</a></li>
-->
                </ul>
            </div>
        </div>
    </div>
</div>
++++

:toc:
:icons:
:numbered:

News
----

7 Nov 2012 - All nagios object definitions are now supported in the REST api.

22 Oct 2012 - Fixes made for Centos 5/6 and Debian packages.

4 Sep 2012 - Added more Nagios directives to the REST api. See the <<X10, Upgrade>> section below. 

21 Jul 2012 - http://blogger.smorg.co.uk/2012/07/nagrestconf-on-raspberry-pi.html[Nagrestconf on Raspberry PI]

20 Jul 2012 - https://sourceforge.net/projects/nagrestconf/files/Debian/[Debian package released to sourceforge]

License
-------

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Screenshot
----------

++++
<img src="http://www.smorg.co.uk/images/nagrestconfgui.png"
alt="Nagrestconf GUI Screenshot" style="float:none" width="500px" />
++++


What is Nagrestconf?
--------------------

'Nagrestconf' is a REST interface and configuration GUI for Nagios.

'Nagrestconf' is written in Bash and PHP.

Specifically, 'Nagrestconf':

* allows Nagios configuration files to be written using a REST api.
* allows the server to be restarted using the REST api.
* provides a configuration Web GUI built on the REST api.

It can be useful for:

* Bulk loading
* Bulk editing
* Automation
* Catching common configuration mistakes
* Configuration Delegation (using additional tools)
* Distributed monitoring (using additional tools)

Not all of the Nagios directives are implemented, refer to the <<X20, Status>> section.

How does it work?
-----------------

[cols="<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Program | Language | Description 
| +rest/index.php+ | PHP | Provides the REST interface and calls 'nagctl'.
| 'nagctl'| Bash | Writes the CSV .setup files and calls 'csv2nag'.
| 'csv2nag' | Bash | Writes the Nagios .cfg object files
| 'restart_nagios' | Bash | Called periodically by cron.
| 'slc_configure' | Bash | For initial configuration.
| +nagrestconf/index.php+ | PHP | A Configuration GUI that uses the REST api.
|========================================================

Requirements
------------

For the Web GUI the following Browsers work: Firefox, Opera, Chrome, Safari -
including Maemo, IPAD and Android versions.

[cols="<,<",frame="topbot",options="header,autowidth"]
|========================================================
| Software Requirement | Reason
| php | for REST interface and Web GUI. v5.3+ only.
| nagios | for checking the configuration. v3+ only.
| apache | for serving PHP pages.
| subversion | for managing configuration versions.
| mod_ssl | for secure communications.
| bash | for non-web scripts.
| grep | used in the bash scripts.
| sed | used in the bash scripts.
| gawk | used in the bash scripts.
| procmail | for locking with 'lockfile'.
|========================================================

[[X10]]
Upgrade
---------

After the upgrade run `/usr/bin/upgrade_setup_files.sh'.

Install
-------

Prebuilt Packages
~~~~~~~~~~~~~~~~~

Get the relevant RPM for Centos/Redhat from Sourceforge at:

https://sourceforge.net/projects/nagrestconf/files/

Debian install packages are also available.

Install Using Prebuilt Packages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.*DEBIAN, CENTOS & REDHAT*

1. Install the prebuilt package downloaded from Sourceforge. For example:
+
----------------------------------------------------------
# On Debian:
gdebi nagrestconf_1.0_all.deb

# On Centos/Redhat:
yum install nagrestconf-1.73-1.noarch.rpm
----------------------------------------------------------
+
2. Configure the system:
+
The system should now be ready to configure using REST or by using the GUI.
+
Test the installation with:
+
----------------------------------------------------------
# On Debian, Centos or Redhat:
bash /usr/share/doc/nagrestconf*/bulk-loading/REST_setup_local.sh
----------------------------------------------------------
+
Then check that it can be seen and edited in the 'Nagrestconf' GUI by pointing
a supported Web Browser at `http://localhost/nagrestconf'.
+
If something goes wrong then there are configuration files in
'/etc/nagrestconf' that might need correcting.


Install From Source
~~~~~~~~~~~~~~~~~~~

Refer to the debian or redhat packaging files.

REST Examples
-------------

Please look at the 'REST_setup_local.sh' script located in the +bulk-loading/+
document directory. This script gives an example of `Bulk loading'.

Here is an example of showing the configuration of a host:

----
# curl -kn 'https://127.0.0.1/rest/show/hosts?json=\{"folder":"local","filter":"abcp3v-lin40.company.local"\}'

[[{"name":"abcp3v-lin40.company.local"},{"alias":"abcp3v-lin40.company.local"},
{"ipaddress":"192.168.1.40"},{"template":"abcprod_htmpl"},
{"hostgroup":"abcprod"},{"contact":""},{"contactgroups":""},
{"activechecks":""},{"servicesets":"basic-linux-checks"},{"disable":""}]]
----

Here is an example of adding a new host:

----
curl -knX POST -d 'json={"folder":"local", \
        "name":"abcp3v-lin02.company.local", \
        "alias":"abcp3v-lin02.company.local", \
        "ipaddress":"192.168.1.2", \
        "template":"abcprod_htmpl", \
        "hostgroup":"abcprod", \
        "servicesets":"basic-linux-checks"}' https://127.0.0.1/rest/add/hosts

["Success"]
----

A service set, basic-linux-checks, had previously been added using the REST
interface as had hostgroups, hosttemplates, servicetemplates and contacts.

The following Nagios `.cfg' file was written for the host:

----
#################################################################
#         THIS FILE WAS CREATED BY THE CSV2NAG SCRIPT           #
#   DON'T MODIFY THIS FILE. ALL CHANGES WILL BE OVERWRITTEN     #
#################################################################

define host {
       use             abcprod_htmpl
       host_name       abcp3v-lin02.company.local
       alias           abcp3v-lin02.company.local
       address         192.168.1.2
       hostgroups      abcprod
}

define service {
        host_name                       abcp3v-lin02.company.local
        use                             abc_stmpl
        service_description             Load
        check_command                   check_any!check_load -r -w 4,4,4 -c 8,8,8
}

define service {
        host_name                       abcp3v-lin02.company.local
        use                             abc_stmpl
        service_description             Puppet Log
        check_command                   check_any!check_puppet_wrapper
}

define service {
        host_name                       abcp3v-lin02.company.local
        use                             abc_stmpl
        service_description             Read-write filesystems
        check_command                   check_any!check_fs_ro.sh
}

define service {
        host_name                       abcp3v-lin02.company.local
        use                             abc_stmpl
        service_description             Puppet Version
        check_command                   check_any!check_puppet_version.sh -v puppet-2.6.16-1
}

define service {
        host_name                       abcp3v-lin02.company.local
        use                             abc_stmpl
        service_description             PING
        check_command                   check_ping!100.0,20%!500.0,60%
}

define service {
        host_name                       abcp3v-lin02.company.local
        use                             abc_stmpl
        service_description             Swap
        check_command                   check_any!check_swap -w 10% -c 5%
}

define service {
        host_name                       abcp3v-lin02.company.local
        use                             abc_stmpl
        service_description             DNS
        check_command                   check_any!check_dns -w 0.5 -c 1 -t 30 -H www.google.com
}

define service {
        host_name                       abcp3v-lin02.company.local
        use                             abc_10trytmpl
        service_description             NTP Time
        check_command                   check_any!check_ntp -H 0.uk.pool.ntp.org -w 0.5 -c 1.0
}

define service {
        host_name                       abcp3v-lin02.company.local
        use                             abc_stmpl
        service_description             Num Users
        check_command                   check_any!check_users -w 15 -c 20
}

define service {
        host_name                       abcp3v-lin02.company.local
        use                             abc_stmpl
        service_description             Processes: Zombies
        check_command                   check_any!check_procs -w 40 -c 80 -s Z
}

define service {
        host_name                       abcp3v-lin02.company.local
        use                             abc_stmpl
        service_description             CPU
        check_command                   check_any!check_cpu.sh
}

define service {
        host_name                       abcp3v-lin02.company.local
        use                             abc_stmpl
        service_description             Memory
        check_command                   check_any!check_mem.pl -w 80 -c 95
}

define service {
        host_name                       abcp3v-lin02.company.local
        use                             abc_stmpl
        service_description             Disks
        check_command                   check_any!check_disk -e -w 10% -c 5%
}

----

[[X20]]
Status
------
Currently implemented directives (177/177) = 100%.

.Currently implemented directives
[cols="<,^,^,>",frame="topbot",options="header,autowidth"]
|========================================================
| Definition | No. in Nagios | No. in Nagrestconf | %
| Contacts | 17 | 17 | 100%
| Contact Groups | 3 | 3 | 100%
| Hosts | 43 | 43 | 100% 
| Host Groups | 7 | 7 | 100%
| Services | 39 | 39 | 100%
| Service Groups | 7 | 7 | 100%
| Service Sets | N/A | 10 | N/A
| Time Periods | 5 | 5 | 100%
| Commands | 2 | 2 | 100%
| Host Dependency | 8 | 8 | 100%
| Host Escalation | 9 | 9 | 100%
| Service Dependency | 10 | 10 | 100%
| Service Escalation | 10 | 10 | 100%
| Hostextinfo | 10 | 10 | 100%
| Serviceextinfo | 7 | 7 | 100%
|========================================================

REST Commands
-------------
The URL is in the form 'https://<HOST>/rest/<COMMAND>/<COMMANDARG>'.

COMMANDS are check, show, add, delete, modify, restart, apply and pipecmd. 

Options to the COMMAND and COMMANDARG are added to the HTTP GET or POST query
string in the form 'json={"option":"value"[,"option":"value"]...}'.

GET requests are for operations that don't modify data, for example:

    https://nagrestconf.host/rest/show/hosts?json={"folder":"local"}'

All GET requests:

* +https://<HOST>/rest/+
** +check/+
*** nagiosconfig json={"folder":"<name>"[,"verbose":"true"]}
** +show/+
*** hosttemplates json={"folder":"<name>"[,"<option>":"<value>"]*}
*** servicetemplates json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hosts json={"folder":"<name>"[,"<option>":"<value>"]*}
*** services json={"folder":"<name>"[,"<option>":"<value>"]*}
*** servicesets json={"folder":"<name>"[,"<option>":"<value>"]*}
*** servicegroups json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hostgroups json={"folder":"<name>"[,"<option>":"<value>"]*}
*** contacts json={"folder":"<name>"[,"<option>":"<value>"]*}
*** contactgroups json={"folder":"<name>"[,"<option>":"<value>"]*}
*** timeperiods json={"folder":"<name>"[,"<option>":"<value>"]*}
*** commands json={"folder":"<name>"[,"<option>":"<value>"]*}
*** servicedeps json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hostdeps json={"folder":"<name>"[,"<option>":"<value>"]*}
*** serviceesc json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hostesc json={"folder":"<name>"[,"<option>":"<value>"]*}
*** serviceextinfo json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hostextinfo json={"folder":"<name>"[,"<option>":"<value>"]*}

POST requests are operation that might modify data, for example:

        https://nagrestconf.host/rest/add/hosts

    with POST data:

        json={
        "folder":"acloud",
        "name":"vhost1.acloud.com",
        "alias":"vhost1.acloud.com",
        "ipaddress":"1.2.3.4",
        "template":"prod_htmpl",
        "hostgroup":"prodvhosts",
        "servicesets":"prod-linux-checks"}' 

All POST requests:

* +https://<HOST>/rest/+
** +add/+ Use options detailed in the following section.
*** hosttemplates json={"folder":"<name>"[,"<option>":"<value>"]*}
*** servicetemplates json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hosts json={"folder":"<name>"[,"<option>":"<value>"]*}
*** services json={"folder":"<name>"[,"<option>":"<value>"]*}
*** servicesets json={"folder":"<name>"[,"<option>":"<value>"]*}
*** servicegroups json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hostgroups json={"folder":"<name>"[,"<option>":"<value>"]*}
*** contacts json={"folder":"<name>"[,"<option>":"<value>"]*}
*** contactgroups json={"folder":"<name>"[,"<option>":"<value>"]*}
*** timeperiods json={"folder":"<name>"[,"<option>":"<value>"]*}
*** commands json={"folder":"<name>"[,"<option>":"<value>"]*}
*** servicedeps json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hostdeps json={"folder":"<name>"[,"<option>":"<value>"]*}
*** serviceesc json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hostesc json={"folder":"<name>"[,"<option>":"<value>"]*}
*** serviceextinfo json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hostextinfo json={"folder":"<name>"[,"<option>":"<value>"]*}
** +delete/+ Use options detailed in the following section.
*** hosttemplates json={"folder":"<name>"[,"<option>":"<value>"]*}
*** servicetemplates json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hosts json={"folder":"<name>"[,"<option>":"<value>"]*}
*** services json={"folder":"<name>"[,"<option>":"<value>"]*}
*** servicesets json={"folder":"<name>"[,"<option>":"<value>"]*}
*** servicegroups json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hostgroups json={"folder":"<name>"[,"<option>":"<value>"]*}
*** contacts json={"folder":"<name>"[,"<option>":"<value>"]*}
*** contactgroups json={"folder":"<name>"[,"<option>":"<value>"]*}
*** timeperiods json={"folder":"<name>"[,"<option>":"<value>"]*}
*** commands json={"folder":"<name>"[,"<option>":"<value>"]*}
*** servicedeps json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hostdeps json={"folder":"<name>"[,"<option>":"<value>"]*}
*** serviceesc json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hostesc json={"folder":"<name>"[,"<option>":"<value>"]*}
*** serviceextinfo json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hostextinfo json={"folder":"<name>"[,"<option>":"<value>"]*}
** +modify/+ Use options detailed in the following section.
*** hosttemplates json={"folder":"<name>"[,"<option>":"<value>"]*}
*** servicetemplates json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hosts json={"folder":"<name>"[,"<option>":"<value>"]*}
*** services json={"folder":"<name>"[,"<option>":"<value>"]*}
*** servicesets json={"folder":"<name>"[,"<option>":"<value>"]*}
*** servicegroups json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hostgroups json={"folder":"<name>"[,"<option>":"<value>"]*}
*** contacts json={"folder":"<name>"[,"<option>":"<value>"]*}
*** contactgroups json={"folder":"<name>"[,"<option>":"<value>"]*}
*** timeperiods json={"folder":"<name>"[,"<option>":"<value>"]*}
*** commands json={"folder":"<name>"[,"<option>":"<value>"]*}
*** servicedeps json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hostdeps json={"folder":"<name>"[,"<option>":"<value>"]*}
*** serviceesc json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hostesc json={"folder":"<name>"[,"<option>":"<value>"]*}
*** serviceextinfo json={"folder":"<name>"[,"<option>":"<value>"]*}
*** hostextinfo json={"folder":"<name>"[,"<option>":"<value>"]*}
** +restart/+
*** nagios json={"folder":"<name>"}
** +apply/+
*** nagiosconfig json={"folder":"<name>"[,"verbose":"true"]}
*** nagioslastgoodconfig json={"folder":"<name>"}
** +pipecmd/+ Use options detailed in the following section.
*** enablehostsvcchecks json={"folder":"<name>","name":"<hostname>}
*** disablehostsvcchecks json={"folder":"<name>","name":"<hostname>" [,"comment","<comment>"]}
*** enablesvccheck json={"folder":"<name>","name":"<hostname>, "svcdesc":"<Service Description>" [,"comment","<comment>"]}
*** disablesvccheck json={"folder":"<name>","name":"<hostname>" "svcdesc":"<Service Description>" [,"comment","<comment>"]}
*** schedhstdowntime json={"folder":"<name>","name":"<hostname>,"starttime":"<unixtime>","endtime":"unixtime" [,"flexible":"<0|1>","duration":"<minutes>","author":"<name>","comment","<comment>"]}
*** delhstdowntime json={"folder":"<name>","name":"<hostname>,"svcdesc":"<Service Description>" [,"comment","<comment>"]}
*** schedhstsvcdowntime json={"folder":"<name>","name":"<hostname>","svcdesc":"<Service Description>" [,"comment","<comment>"]}
*** delhstsvcdowntime json={"folder":"<name>","name":"<hostname>","svcdesc":"<Service Description>" [,"comment","<comment>"]}
*** schedsvcdowntime json={"folder":"<name>","name":"<hostname>","svcdesc":"<Service Description>" [,"comment","<comment>"]}
*** delsvcdowntime json={"folder":"<name>","name":"<hostname>","svcdesc":"<Service Description>" [,"comment","<comment>"]}


Currently Implemented Definitions and Directives
------------------------------------------------

Refer to the Nagios object definitions documentation for more information about
individual options in the following tables. It can be found at the following
URL:

http://nagios.sourceforge.net/docs/3_0/objectdefinitions.html

The 'Column' number in the following tables relates to the column number in the
comma delimited files on the nagios server. These files are used by 'csv2nag'
to create the nagios configuration files.

Key for Flags column:

 * \'U' - the option is Unimplemented.
 * \'R' for a required field.
 * \'K' to show the fields required to specify a unique key.
 * \'L' for a list field. Lists consist of zero or more items separated by spaces.
 * \'C' for a compound field: <name>|<value>[,<name>|<value>]...
 * \'X' implemented in REST but not in the Web front-end.

NOTE: Many examples use JSON.sh, which can be found here: https://github.com/dominictarr/JSON.sh

contacts COMMANDARG
~~~~~~~~~~~~~~~~~~~

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Contact name | RK | name
| 2. | Use| R | use
| 3. | Alias pretty name | R | alias
| 4. | Email address |  | emailaddr
| 5. | Service notification period | R | svcnotifperiod
| 6. | Service notification options | LR | svcnotifopts
| 7. | Service notification commands | LR | svcnotifcmds
| 8. | Host notification period | R | hstnotifperiod
| 9. | Host notification options | LR | hstnotifopts
| 10. | Host notification commands | LR | hstnotifcmds
| 11. | Can submit commands |  | cansubmitcmds
| 12. | Disable | U | disable
| 13. | Service notification enabled | X | svcnotifenabled
| 14. | Host notification enabled | X | hstnotifenabled
| 15. | Pager | X | pager
| 16. | Address1 | X | address1
| 17. | Address2 | X | address2
| 18. | Address3 | X | address3
| 19. | Address4 | X | address4
| 20. | Address5 | X | address5
| 21. | Address6 | X | address6
| 22. | Retain status info | X | retainstatusinfo
| 23. | Retain non-status info | X | retainnonstatusinfo
| 24. | Contact groups | XL | contactgroups
|========================================================

contactgroups COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~~~

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Contact group name | RK | name
| 2. | Alias pretty name | R | alias
| 3. | Members list | RL | members
| 4. | Disable | U | disable
|========================================================

hosts COMMANDARG
~~~~~~~~~~~~~~~~~

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Host name | RK | name
| 2. | Alias | R | alias
| 3. | IP Address (address) | R | ipaddress
| 4. | Template (use) | R | template
| 5. | Shown Hostgroup |  L | hostgroup
| 6. | Contact |  L | contact
| 7. | Contact Group | L | contactgroups
| 8. | Active checks |  | activechecks
| 9. | Service Set |  | servicesets
| 10. | Disable |  | disable
| 11. | Display name |  | displayname
| 12. | Parents | LX | parents
| 13. | Check command | X | command
| 14. | Initial state | X | initialstate
| 15. | Max check attempts | X | maxcheckattempts
| 16. | Check interval | X | checkinterval
| 17. | Retry interval | X | retryinterval
| 18. | Passive checks enabled | X | passivechecks
| 19. | Check period | X | checkperiod
| 20. | Obsess over host | X | obsessoverhost
| 21. | Check freshness | X | checkfreshness
| 22. | Freshness threshold | X | freshnessthresh
| 23. | Event handler | X | eventhandler
| 24. | Event handler enabled | X | eventhandlerenabled
| 25. | Low flap threshold | X | lowflapthresh
| 26. | High flap threshold | X | highflapthresh
| 27. | Flap detection enabled | X | flapdetectionenabled
| 28. | Flap detection options | LX | flapdetectionoptions
| 29. | Process perf data | X | processperfdata
| 30. | Retain status information | X | retainstatusinfo
| 31. | Retain nonstatus information | X | retainnonstatusinfo
| 32. | Notification interval | X | notifinterval
| 33. | First notification delay | X | firstnotifdelay
| 34. | Notification period | X | notifperiod
| 35. | Notification opts | LX | notifopts
| 36. | Notifications enabled | X | notifications_enabled
| 37. | Stalking options | LX | stalkingoptions
| 38. | Notes | X | notes
| 39. | Notes url | X | notes_url
| 40. | Icon image | X | icon_image
| 41. | Icon image alt | X | icon_image_alt
| 42. | Vrml image | X | vrml_image
| 43. | Statusmap image | X | statusmap_image
| 44. | 2d coords | X | coords2d
| 45. | 3d coords | X | coords3d
| 46. | Action url | X | action_url
|========================================================

Examples
^^^^^^^^

Show all hosts and attributes:

 curl -kn 'https://127.0.0.1/rest/show/hosts?json=\{"folder":"local"\}' \
 | JSON.sh | grep '\[[0-9]\+,[0-9]\+]'

Show only the host names beginning with 'tx':

 curl -kn 'https://127.0.0.1/rest/show/hosts?json=\{"folder":"local","filter":"tx.*"\}'
 | JSON.sh | grep '\[[0-9]\+,0]'

hosttemplates COMMANDARG 
~~~~~~~~~~~~~~~~~~~~~~~~
[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Name | RK | name
| 2. | Use | R | use
| 3. | Contacts | L | contacts
| 4. | Contact groups | L | contactgroups
| 5. | Normal check interval | U | normchecki
| 6. | Check interval | R | checkinterval
| 7. | Retry interval | R | retryinterval
| 8. | Notification period | R | notifperiod
| 9. | Notification options| L | notifopts
| 10. | Disable | U | disable
| 11. | Check period |  R | checkperiod
| 12. | Max check attempts |  R | maxcheckattempts
| 13. | Check command |  | checkcommand
| 14. | Notification interval |  R | notifinterval
| 15. | Passive checks enabled | X | passivechecks
| 16. | Obsess over host | X | obsessoverhost
| 17. | Check freshness | X | checkfreshness
| 18. | Freshness threshold | X | freshnessthresh
| 19. | Event handler | X | eventhandler
| 20. | Event handler enabled | X | eventhandlerenabled
| 21. | Low flap threshold | X | lowflapthresh
| 22. | High flap threshold | X | highflapthresh
| 23. | Flap detection enabled | X | flapdetectionenabled
| 24. | Flap detection options | LX | flapdetectionoptions
| 25. | Process perf data | X | processperfdata
| 26. | Retain status information | X | retainstatusinfo
| 27. | Retain nonstatus information | X | retainnonstatusinfo
| 28. | First notification delay | X | firstnotifdelay
| 29. | Notifications enabled | X | notifications_enabled
| 30. | Stalking options | LX | stalkingoptions
| 31. | Notes | X | notes
| 32. | Notes url | X | notes_url
| 33. | Icon image | X | icon_image
| 34. | Icon image alt | X | icon_image_alt
| 35. | Vrml image | X | vrml_image
| 36. | Statusmap image | X | statusmap_image
| 37. | 2d coords | X | coords2d
| 38. | 3d coords | X | coords3d
| 39. | Action url | X | action_url
|========================================================

Examples
^^^^^^^^

Show all host templates and attributes:

 curl -kn 'https://127.0.0.1/rest/show/hosttemplates?json=\{"folder":"local"\}' \
 | JSON.sh | grep '\[[0-9]\+,[0-9]\+]'

Set the action_url for the host template:

 curl -knX POST -d 'json={"folder":"local","name":"std_htmpl",
        "action_url":"/pnp4nagios/graph?host=$HOSTNAME$"}' \
        https://127.0.0.1/rest/modify/hosttemplates

services COMMANDARG 
~~~~~~~~~~~~~~~~~~~

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Name (host_name) | RK | name
| 2. | Service template (use) | R | template
| 3. | Service command (check_command) | R | command
| 4. | Service description | RK | svcdesc
| 5. | Service groups | L | svcgroup
| 6. | Contacts | L | contacts
| 7. | Contact groups | L | contactgroups
| 8. | Freshness threshold (auto)* |  | freshnessthresh
| 9. | Active checks enabled |  | activechecks
| 10. | Custom variables | C | customvars
| 11. | Disable |  | disable
| 12. | Display name | X | displayname
| 13. | Is volatile | X | isvolatile
| 14. | Initial state | X | initialstate
| 15. | Max check attempts | X | maxcheckattempts
| 16. | Check interval | X | checkinterval
| 17. | Retry interval | X | retryinterval
| 18. | Passive checks enabled | X | passivechecks
| 19. | Check period | X | checkperiod
| 20. | Obsess over service | X | obsessoverservice
| 21. | Freshness threshold (manual) | X | manfreshnessthresh
| 22. | Check Freshness | X | checkfreshness
| 23. | Event handler | X | eventhandler
| 24. | Event handler enabled | X | eventhandlerenabled
| 25. | Low flap threshold | X | lowflapthresh
| 26. | High flap threshold | X | highflapthresh
| 27. | Flap detection enabled | X | flapdetectionenabled
| 28. | Flap detection options | LX | flapdetectionoptions
| 29. | Process perf data | X | processperfdata
| 30. | Retain status information | X | retainstatusinfo
| 31. | Retain nonstatus information | X | retainnonstatusinfo
| 32. | Notification interval | X | notifinterval
| 33. | First notification delay | X | firstnotifdelay
| 34. | Notification period | X | notifperiod
| 35. | Notification opts | LX | notifopts
| 36. | Notifications enabled | X | notifications_enabled
| 37. | Stalking options | LX | stalkingoptions
| 38. | Notes | X | notes
| 39. | Notes url | X | notes_url
| 40. | Action url | X | action_url
| 41. | Icon image | X | icon_image
| 42. | Icon image alt | X | icon_image_alt
| 43. | Vrml image | X | vrml_image
| 44. | Statusmap image | X | statusmap_image
| 45. | 2d coords | X | coords2d
| 46. | 3d coords | X | coords3d
|========================================================

pass:[*] Freshness thresh (auto) also sets check_command to no-checks-received,
active_checks_enabled to 0 (depending on whether the host is a dcc or not),
passive_checks_enabled to 1 and check_freshness to 1. Use manfreshnessthresh
to restrict to only setting the freshness_threshold.

Examples
^^^^^^^^

Show all services and attributes:

 curl -kn 'https://127.0.0.1/rest/show/services?json=\{"folder":"local"\}' \
 | JSON.sh | grep '\[[0-9]\+,[0-9]\+]'

Show all host names that have a 'Disks' service description (column 4)

 curl -kn 'https://127.0.0.1/rest/show/services?json=\{"folder":"local","column":"4","filter":"Disks"\}' \
 | JSON.sh | grep '\[[0-9]\+,0]'

servicesets COMMANDARG 
~~~~~~~~~~~~~~~~~~~~~~

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Name (host_name) | RK | name
| 2. | Service template (use) | R | template
| 3. | Service command (check_command) | R | command
| 4. | Service description | RK | svcdesc
| 5. | Service groups | L | svcgroup
| 6. | Contacts | L | contacts
| 7. | Contact groups | L | contactgroups
| 8. | Freshness threshold (auto)* |  | freshnessthresh
| 9. | Active checks |  | activechecks
| 10. | Custom variables | C | customvars
| 11. | Disable | U | disable
| 12. | Display name | X | displayname
| 13. | Is volatile | X | isvolatile
| 14. | Initial state | X | initialstate
| 15. | Max check attempts | X | maxcheckattempts
| 16. | Check interval | X | checkinterval
| 17. | Retry interval | X | retryinterval
| 18. | Passive checks enabled | X | passivechecks
| 19. | Check period | X | checkperiod
| 20. | Obsess over service | X | obsessoverservice
| 21. | Freshness threshold (manual) | X | manfreshnessthresh
| 22. | Check Freshness | X | checkfreshness
| 23. | Event handler | X | eventhandler
| 24. | Event handler enabled | X | eventhandlerenabled
| 25. | Low flap threshold | X | lowflapthresh
| 26. | High flap threshold | X | highflapthresh
| 27. | Flap detection enabled | X | flapdetectionenabled
| 28. | Flap detection options | LX | flapdetectionoptions
| 29. | Process perf data | X | processperfdata
| 30. | Retain status information | X | retainstatusinfo
| 31. | Retain nonstatus information | X | retainnonstatusinfo
| 32. | Notification interval | X | notifinterval
| 33. | First notification delay | X | firstnotifdelay
| 34. | Notification period | X | notifperiod
| 35. | Notification opts | LX | notifopts
| 36. | Notifications enabled | X | notifications_enabled
| 37. | Stalking options | LX | stalkingoptions
| 38. | Notes | X | notes
| 39. | Notes url | X | notes_url
| 40. | Action url | X | action_url
| 41. | Icon image | X | icon_image
| 42. | Icon image alt | X | icon_image_alt
| 43. | Vrml image | X | vrml_image
| 44. | Statusmap image | X | statusmap_image
| 45. | 2d coords | X | coords2d
| 46. | 3d coords | X | coords3d
|========================================================

pass:[*] Freshness thresh (auto) also sets check_command to no-checks-received,
active_checks_enabled to 0 (depending on whether the host is a dcc or not),
passive_checks_enabled to 1 and check_freshness to 1. Use manfreshnessthresh
to restrict to only setting the freshness_threshold.

servicetemplates COMMANDARG 
~~~~~~~~~~~~~~~~~~~~~~~~~~~

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Name | RK | name
| 2. | Use | | use
| 3. | Contacts | L | contacts
| 4. | Contact groups | L | contactgroups
| 5. | Notification options | L | notifopts
| 6. | Check interval | R | checkinterval
| 7. | Normal check interval | U | normchecki
| 8. | Retry interval | R | retryinterval
| 9. | Notification interval | R | notifinterval
| 10. | Notification period | R | notifperiod
| 11. | Disable | U | disable
| 12. | Check period | R | checkperiod
| 13. | Max check attempts | R | maxcheckattempts
| 14. | Freshness threshold (auto)* |  | freshnessthresh
| 15. | Active checks |  | activechecks
| 16. | Custom variables | C | customvars
| 17. | Is volatile | X | isvolatile
| 18. | Initial state | X | initialstate
| 19. | Passive checks enabled | X | passivechecks
| 20. | Obsess over service | X | obsessoverservice
| 21. | Freshness threshold (manual) | X | manfreshnessthresh
| 22. | Check Freshness | X | checkfreshness
| 23. | Event handler | X | eventhandler
| 24. | Event handler enabled | X | eventhandlerenabled
| 25. | Low flap threshold | X | lowflapthresh
| 26. | High flap threshold | X | highflapthresh
| 27. | Flap detection enabled | X | flapdetectionenabled
| 28. | Flap detection options | LX | flapdetectionoptions
| 29. | Process perf data | X | processperfdata
| 30. | Retain status information | X | retainstatusinfo
| 31. | Retain nonstatus information | X | retainnonstatusinfo
| 32. | First notification delay | X | firstnotifdelay
| 33. | Notifications enabled | X | notifications_enabled
| 34. | Stalking options | LX | stalkingoptions
| 35. | Notes | X | notes
| 36. | Notes url | X | notes_url
| 37. | Action url | X | action_url
| 38. | Icon image | X | icon_image
| 39. | Icon image alt | X | icon_image_alt
| 40. | Vrml image | X | vrml_image
| 41. | Statusmap image | X | statusmap_image
| 42. | 2d coords | X | coords2d
| 43. | 3d coords | X | coords3d
|========================================================

pass:[*] Freshness thresh (auto) also sets check_command to no-checks-received,
active_checks_enabled to 0 (depending on whether the host is a dcc or not),
passive_checks_enabled to 1 and check_freshness to 1. Use manfreshnessthresh
to restrict to only setting the freshness_threshold.

commands COMMANDARG
~~~~~~~~~~~~~~~~~~~

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Command name | RK | name
| 2. | Command line | R | command
| 3. | Disable | U | disable
|========================================================

hostgroups COMMANDARG
~~~~~~~~~~~~~~~~~~~~~

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Hostgroup name | RK | name
| 2. | Alias | R | alias
| 3. | Disable |   | disable
| 4. | Members | LX | members
| 5. | Hostgroup members | LX | hostgroupmembers
| 6. | Notes | X | notes
| 7. | Notes url | X | notes_url
| 8. | Action url | X | action_url
|========================================================

servicegroups COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~~~

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Hostgroup name | RK | name
| 2. | Alias | R | alias
| 3. | Disable | U | disable
| 4. | Members | LX | members
| 5. | Servicegroup members | LX | servicegroupmembers
| 6. | Notes | X | notes
| 7. | Notes url | X | notes_url
| 8. | Action url | X | action_url
|========================================================

timeperiods COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Timeperiod name | RK | name
| 2. | Alias| R | alias
| 3. | Freestyle time definition | C | definition
| 4. | Timeperiod to exclude | L | exclude
| 5. | Disable | U | disable
| 6. | Freestyle time exception | CX | exception
|========================================================

servicedeps COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Dependent host name | RKX | dephostname
| 2. | Dependent hostgroup name | KX | dephostgroupname
| 3. | Dependent service description | RKX | depsvcdesc
| 4. | Host name | RKX | hostname
| 5. | Hostgroup name | KX | hostgroupname
| 6. | Service description | RKX | svcdesc
| 7. | Inherits parent | X | inheritsparent
| 8. | Execution failure criteria | LX | execfailcriteria
| 9. | Notification failure criteria | LX | notiffailcriteria
| 10. | Dependency period | X | period
| 11. | Disable | X | disable
|========================================================

NOTE: Columns 1,2,4 and 5 are not lists in REST as they are in a
Nagios configuration file.

hostdeps COMMANDARG
~~~~~~~~~~~~~~~~~~~

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Dependent host name | RKX | dephostname
| 2. | Dependent hostgroup name | KX | dephostgroupname
| 3. | Host name | RKX | hostname
| 4. | Hostgroup name | KX | hostgroupname
| 5. | Inherits parent | RX | inheritsparent
| 6. | Execution failure criteria | LRX | execfailcriteria
| 7. | Notification failure criteria | LRX | notiffailcriteria
| 8. | Dependency period | RX | period
| 9. | Disable | UX | disable
|========================================================

NOTE: Columns 1 and 2 are not lists in REST as they are in a
Nagios configuration file.

serviceescalation COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Host name | KRX | hostname
| 2. | Hostgroup name | X | hostgroupname
| 3. | Service description | KRX | svcdesc
| 4. | Contacts | LRX | contacts
| 5. | Contact groups | LR | contactgroups
| 6. | First notification | RX | firstnotif
| 7. | Last notification | RX | lastnotif
| 8. | Notification interval | RX | notifinterval
| 9. | Escalation period | X | period
| 10. | Escalation options | LX | escopts
| 11. | Disable | X | disable
|========================================================

hostescalation COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~~~~

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Host name | KRX | hostname
| 2. | Hostgroup name | X | hostgroupname
| 3. | Contacts | LRX | contacts
| 4. | Contact groups | LR | contactgroups
| 5. | First notification | RX | firstnotif
| 6. | Last notification | RX | lastnotif
| 7. | Notification interval | RX | notifinterval
| 8. | Escalation period | X | period
| 9. | Escalation options | LX | escopts
| 10. | Disable | X | disable
|========================================================

serviceextinfo COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~~~~

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Host name | RX | hostname
| 2. | Service description | X | svcdesc
| 3. | Notes | X | notes
| 4. | Notes url | X | notes_url
| 5. | Action url | X | action_url
| 6. | Icon image | X | icon_image
| 7. | Icon image alt | X | icon_image_alt
| 8. | Disable | X | disable
|========================================================

Examples
^^^^^^^^

Show all serviceextinfo entries and attributes:

 curl -kn 'https://127.0.0.1/rest/show/serviceextinfo?json=\{"folder":"local"\}' \
 | JSON.sh | grep '\[[0-9]\+,[0-9]\+]'

hostextinfo COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| 1. | Host name | RX | hostname
| 2. | Notes | X | notes
| 3. | Notes url | X | notes_url
| 4. | Action url | X | action_url
| 5. | Icon image | X | icon_image
| 6. | Icon image alt | X | icon_image_alt
| 7. | Vrml image | X | vrml_image
| 8. | Statusmap image | X | statusmap_image
| 9. | 2d coords | X | coords2d
| 10. | 3d coords | X | coords3d
| 11. | Disable | X | disable
|========================================================

Examples
^^^^^^^^

Show all hostextinfo entries and attributes:

 curl -kn 'https://127.0.0.1/rest/show/hostextinfo?json=\{"folder":"local"\}' \
 | JSON.sh | grep '\[[0-9]\+,[0-9]\+]'

Set action_url for a host:

 curl -knX POST -d 'json={"folder":"local",
        "hostname":"linhst2",
        "action_url":"/pnp4nagios/graph?host=$HOSTNAME$"}' \
        https://127.0.0.1/rest/add/hostextinfo

Set action_url for ALL hosts. Note that it would probably be better
to set the action_url in the host template or for each host.

 # Create a list of hosts
 curl -kn 'https://127.0.0.1/rest/show/hosts?json=\{"folder":"local"\}' \
 | JSON.sh | grep '\[[0-9]\+,0]' | sed 's/^.*:"\(.*\)".*/\1/' >list1

 # Use the list to create hostextinfo entries
 while read HNAME x; do
 curl -knX POST -d 'json={"folder":"local",
        "hostname":"'$HNAME'",
        "action_url":"/pnp4nagios/graph?host=$HOSTNAME$"}'
        https://127.0.0.1/rest/add/hostextinfo
 done < list1

Delete ALL hostextinfo entries:

 curl -knX POST -d 'json={"folder":"local","hostname":".*"}'
        https://127.0.0.1/rest/delete/hostextinfo

enablehostsvcchecks COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enables active checks for the host then enables all passive and active service
checks for the host. The following nagios pipe commands are sent:

 ENABLE_HOST_CHECK
 ENABLE_PASSIVE_SVC_CHECKS
 ENABLE_SVC_CHECK

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| N/a. | Host name | RX | name
|========================================================

disablehostsvcchecks COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Disables active checks for the host then disables all passive and active
service checks for the host. Status is changed to green for the host and all
of its service checks and the comment is set. The following nagios pipe
commands are sent:

 DISABLE_HOST_CHECK
 DISABLE_HOST_SVC_CHECKS
 PROCESS_SERVICE_CHECK_RESULT
 ... 10 second sleep ...
 DISABLE_PASSIVE_SVC_CHECKS

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| N/a. | Host name | RX | name
| N/a. | Comment for the Nagios GUI | X | comment
|========================================================

enablesvccheck COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~~~~

Enables an individual service check and optionally sets a comment otherwise the
default comment will be used: "Un-disabled via REST. Check scheduled.". The
following nagios pipe commands are sent:

 ENABLE_PASSIVE_SVC_CHECKS
 ENABLE_SVC_CHECK
 PROCESS_SERVICE_CHECK_RESULT

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| N/a. | Host name | RX | name
| N/a. | Service description | RX | svcdesc
| N/a. | Comment for the Nagios GUI | X | comment
|========================================================

disablesvccheck COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~~~~~

Disables an individual service check and optionally sets a comment otherwise
the default comment will be used: "Disabled via REST interface.". The following
nagios pipe commands are sent:

 DISABLE_SVC_CHECK
 PROCESS_SERVICE_CHECK_RESULT
 DISABLE_PASSIVE_SVC_CHECKS

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| N/a. | Host name | RX | name
| N/a. | Service description | RX | svcdesc
| N/a. | Comment for the Nagios GUI | X | comment
|========================================================

schedhstdowntime COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Schedule fixed or flexible downtime for a host. The following nagios pipe
commands are sent:

 SCHEDULE_HOST_DOWNTIME

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| N/a. | Host name | RX | name
| N/a. | Start time [unix time] | RX | starttime
| N/a. | End time [unix time] | RX | endtime
| N/a. | Flexible downtime [_0_\|1] | X | flexible
| N/a. | Duration (for flexible downtime in minutes) | X | duration
| N/a. | Comment for the Nagios GUI* | X | comment
| N/a. | Author | X | author
|========================================================

pass:[*] If comment is not supplied then the default comment,
"Scheduled via the REST interface.", is used.

Example
^^^^^^^

Schedule 1 hour of fixed downtime for ahst2, starting from now.

 curl -knX POST -d 'json={
    "folder":"local",
    "name":"ahst2",
    "starttime":"'`date +%s -d now`'",
    "endtime":"'`date +%s -d "now + 1 hour"`'"}'
    http://127.0.0.1/rest/pipecmd/schedhstdowntime

delhstdowntime COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~~~~~

Delete all scheduled downtime for a host. The following nagios pipe commands
are sent:

 DEL_HOST_DOWNTIME

[cols="^e,<,^,<",frame="topbot",options="header,autowidth"]
|========================================================
| Column | Description | Flags | REST variable name
| N/a. | Host name | RX | name
|========================================================

Example:

Get rid of all host downtime associated with ahst2.

 curl -knX POST -d 'json={
    "folder":"local",
    "name":"ahst2" }'
    http://127.0.0.1/rest/pipecmd/delhstdowntime

schedulehostsvcdowntime COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Schedule fixed or flexible downtime for a host and all its services.

delhostsvcdowntime COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Delete all scheduled downtime for a host and all its services.

schedulesvcdowntime COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Schedule fixed or flexible downtime for a host.

delsvcdowntime COMMANDARG
~~~~~~~~~~~~~~~~~~~~~~~~~

Delete all scheduled downtime for a host.
