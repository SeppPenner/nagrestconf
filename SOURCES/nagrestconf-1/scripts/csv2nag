#!/bin/bash
#
# Copyright(C) 2010 Mark Clarkson <mark.clarkson@smorg.co.uk>
#
#    This software is provided under the terms of the GNU
#    General Public License (GPL), as published at: 
#    http://www.gnu.org/licenses/gpl.html .
#
# File:     config_create.sh
# Author:   Mark Clarkson
# Date:     20 May 2010
# Version:  0.13
# Modified:
#           2010-07-23 Mark Clarkson
#           * Now writes hosttemplates, servicetemplates and contacts files.
#           * Now adds contacts and contact_groups fields to config for
#             hosts.setup and services.setup files.
#           * New -s command line option.
#           * New field for contacts, can_submit_commands.
#           2010-07-30 Mark Clarkson
#           * Documentation fixes
#           2010-09-08 Mark Clarkson
#           * Added active_checks_enabled support to hosts and services.
#           2011-09-06 Mark Clarkson
#           * Can be used for both dcc and slc now via DCC variable.
#
# Purpose:  This a utility to help with creation of Nagios configuration
#           files. For more information type, 
#
#             csv2nag -h
#
# Notes:
#

# ---------------------------------------------------------------------------
# SETINGS - MODIFY AS NEEDED
# ---------------------------------------------------------------------------

#
#
# -------------------- DO NOT MODIFY ANYTHING BELOW -------------------------
#
#

# ---------------------------------------------------------------------------
# GLOBALS
# ---------------------------------------------------------------------------

VERSION="1.0"

CONFIG="/etc/nagrestconf/csv2nag.conf"

REMOTE_EXECUTOR=
FRESHNESS_CHECK_COMMAND=

# -- Constants

# Program args
ME="$0"
CMDLINE="$@"
# Standard
TRUE=1
FALSE=0
# Errors
ERROR_NONE=0
ERROR=1
WARN=2
# Types of .setup files
FT_NONE=0
FT_HOSTS=1
FT_SERVICES=2
FT_HOSTTEMPLATES=3
FT_SERVICETEMPLATES=4
FT_CONTACTS=5
FT_TIMEPERIODS=6
FT_COMMANDS=7
FT_SERVICEDEPS=8
FT_HOSTDEPS=9
FT_SERVICEESC=10
FT_HOSTESC=11
FT_SERVICEEXTINFO=12
FT_HOSTEXTINFO=13
FT_ALL=14

# -- General variables

G_BREAKOUT=0

# Suffix array for building file name
declare -a gftsuffix
# Command line options
# The file we read from (initially from spreadsheet)
gsetupfile=
gsetupfiletype=
#gforce=$FALSE       
# Name of the new config file
gfnnewconfig=
# Standard file suffixes/prefixes/extensions
gconfigsuffix=
gconfigprefix=
gsetupprefix=
gfnhostsetup=
gfntimeperiodsetup=
gfntimeperiodcfg=
gfncommandsetup=
gfncommandcfg=
gfnhostgrpsetup=
gfnhostgrpsetupauto=
gfnhostgrpcfg=
gfnhostmplsetup=
gfnhostmplcfg=
gfnsvcgrpcfg=
gfnsvcsetup=
gfnsvcgrpsetup=
gfnsvcgrpsetupauto=
gfnsvctmplsetup=
gfnsvctmplcfg=
gfncontactsetup=
gfncontactgrpsetup=
gfncontactscfg=
[[ $DCC -eq 1 ]] && gfnmandatorygroupcfg=
gconfigext=
user_is_sure=$FALSE

# ---------------------------------------------------------------------------
#
# SUPPORT FUNCTIONS
#
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
init_data()
# ---------------------------------------------------------------------------
# Purpose:      Sets global data structures
# Arguments:    None
# Returns:      Nothing
{
    # Standard config file suffixes
    gftsuffix[FT_NONE]="ERROR"
    gftsuffix[FT_HOSTS]="hosts"
    gftsuffix[FT_SERVICES]="services"
    gftsuffix[FT_HOSTTEMPLATES]="hosttemplates"
    gftsuffix[FT_SERVICETEMPLATES]="servicetemplates"
    gftsuffix[FT_CONTACTS]="contacts"
    gftsuffix[FT_TIMEPERIODS]="timeperiods"
    gftsuffix[FT_COMMANDS]="commands"

    # Set the name of the output file
    gconfigsuffix="${gftsuffix[gsetupfiletype]}"
    gfnnewconfig="${gconfigprefix}_${gconfigsuffix}.${gconfigext}"

    # Set all our globals here
    : ${gconfigprefix:="$(basename `pwd`)"}
    gsetupprefix="setup/$gconfigprefix"
    gfnhostsetup=${gsetupprefix}_hosts.setup
    gfncommandsetup=${gsetupprefix}_commands.setup
    gfncommandcfg=${gconfigprefix}_commands.cfg
    gfntimeperiodsetup=${gsetupprefix}_timeperiods.setup
    gfntimeperiodcfg=${gconfigprefix}_timeperiods.cfg
    gfnhostgrpsetup=${gsetupprefix}_hostgroups.setup
    gfnhostgrpsetupauto=${gsetupprefix}_hostgroups.auto.setup
    gfnhostgrpcfg=${gconfigprefix}_hostgroups.cfg
    gfnhostmplsetup=${gsetupprefix}_hosttemplates.setup
    gfnhostmplcfg=${gconfigprefix}_hosttemplates.cfg
    gfnsvcgrpcfg=${gconfigprefix}_servicegroups.cfg
    gfnsvcsetup=${gsetupprefix}_services.setup
    gfnsvcgrpsetup=${gsetupprefix}_servicegroups.setup
    gfnsvcgrpsetupauto=${gsetupprefix}_servicegroups.auto.setup
    gfnsvctmplsetup=${gsetupprefix}_servicetemplates.setup
    gfnsvctmplcfg=${gconfigprefix}_servicetemplates.cfg
    gfncontactsetup=${gsetupprefix}_contacts.setup
    gfncontactgrpsetup=${gsetupprefix}_contactgroups.setup
    gfncontactscfg=${gconfigprefix}_contacts.cfg
    gfnsvcdepsetup=${gsetupprefix}_servicedeps.setup
    gfnsvcdepcfg=${gconfigprefix}_servicedeps.cfg
    gfnhostdepsetup=${gsetupprefix}_hostdeps.setup
    gfnhostdepcfg=${gconfigprefix}_hostdeps.cfg
    gfnsvcescsetup=${gsetupprefix}_serviceesc.setup
    gfnsvcesccfg=${gconfigprefix}_serviceesc.cfg
    gfnhostescsetup=${gsetupprefix}_hostesc.setup
    gfnhostesccfg=${gconfigprefix}_hostesc.cfg
    gfnsvcextsetup=${gsetupprefix}_serviceextinfo.setup
    gfnsvcextcfg=${gconfigprefix}_serviceextinfo.cfg
    gfnhostextsetup=${gsetupprefix}_hostextinfo.setup
    gfnhostextcfg=${gconfigprefix}_hostextinfo.cfg

    [[ $DCC -eq 1 ]] && gfnmandatorygroupcfg=${gconfigprefix}_mandatory_group.setup
    gconfigext="cfg"
}

# ----------------------------------------------------------------------------
usage()
# ----------------------------------------------------------------------------
# Purpose:      Show program options.
# Arguments:    None
# Returns:      Nothing
{
    echo
    echo "Usage: `basename $ME` [-yhs] TYPE"
    echo
    echo " -y       :  Answer 'yes' to any questions."
    echo " -h       :  Display this help text."
    echo " -s NAME  :  Use NAME for service-line name instead of using the"
    echo "             parent directory as the service-line name."
    echo " TYPE     :  One of six TYPES are understood:"
    echo "             hosts          -  Create hosts files."
    echo "                               One host file is created per host in"
    echo "                               the $gconfigprefix-nodes directory."
    echo "                               The $gconfigprefix-hostgroups.cfg"
    echo "                               file is also created in the top"
    echo "                               level directory."
    echo "             services       -  Add services to hosts files in"
    echo "                               the $gconfigprefix-nodes directory."
    echo "                               This script should previously have"
    echo "                               been run with the 'hosts' TYPE."
    echo "                               The $gconfigprefix-servicegroups.cfg"
    echo "                               file will also be created."
    echo "             hosttemplates  -  Create a hosttemplates file."
    echo "             svctemplates   -  Create a servicetemplates file."
    echo "             contacts       -  Create a contacts file."
    echo "             commands       -  Create a commands file."
    echo "             timeperiods    -  Create a timeperiods file."
    echo "             servicedeps    -  Create a servicedeps file."
    echo "             hostdeps       -  Create a hostdeps file."
    echo "             serviceesc     -  Create a serviceesc file."
    echo "             hostesc        -  Create a hostesc file."
    echo "             serviceext     -  Create a serviceext file."
    echo "             hostext        -  Create a hostext file."
    echo "             all            -  Create all TYPEs in one go."
    echo
    echo "`basename $ME` should be run from the directory containing the 'setup'"
    echo "directory and the following files must exist:"
    echo
    echo "             $gsetupprefix-hosts.setup"
    echo "             $gsetupprefix-hostgroups.setup"
    echo "             $gsetupprefix-hosttemplates.setup"
    echo "             $gsetupprefix-services.setup"
    echo "             $gsetupprefix-servicegroups.setup"
    echo "             $gsetupprefix-servicetemplates.setup"
    echo "             $gsetupprefix-contacts.setup"
    echo "             $gsetupprefix-contactgroups.setup"
    echo "             $gsetupprefix-commands.setup"
    echo
    echo "Examples:"
    echo "  Create the entire config from scratch, wiping out the current one:"
    echo "    `basename $ME` all"
    echo
}

# ----------------------------------------------------------------------------
parse_options()
# ----------------------------------------------------------------------------
# Purpose:      Parse program options and set globals.
# Arguments:    None
# Returns:      Nothing
{
    set -- $CMDLINE
    while true
    do
        case $1 in
            -s) gconfigprefix="$2"; shift
            ;;
            -y) user_is_sure=$TRUE
            ;;
            -h|--help) init_data; usage; exit 0
            ;;
            -v|--version) echo "$VERSION"; exit 0
            ;;
            hosts) gsetupfiletype=$FT_HOSTS
            ;;
            services) gsetupfiletype=$FT_SERVICES
            ;;
            hosttemplates) gsetupfiletype=$FT_HOSTTEMPLATES
            ;;
            servicetemplates) gsetupfiletype=$FT_SERVICETEMPLATES
            ;;
            contacts) gsetupfiletype=$FT_CONTACTS
            ;;
            commands) gsetupfiletype=$FT_COMMANDS
            ;;
            timeperiods) gsetupfiletype=$FT_TIMEPERIODS
            ;;
            servicedeps) gsetupfiletype=$FT_SERVICEDEPS
            ;;
            hostdeps) gsetupfiletype=$FT_HOSTDEPS
            ;;
            serviceesc) gsetupfiletype=$FT_SERVICEESC
            ;;
            hostesc) gsetupfiletype=$FT_HOSTESC
            ;;
            serviceext) gsetupfiletype=$FT_SERVICEEXTINFO
            ;;
            hostext) gsetupfiletype=$FT_HOSTEXTINFO
            ;;
            all) gsetupfiletype=$FT_ALL
            ;;
            ?*) usage
                echo -e "\nInvalid command\n"
                exit 4
            ;;
        esac
        shift 1 || break
    done
}

# ----------------------------------------------------------------------------
check_for_setup_file()
# ----------------------------------------------------------------------------
# Purpose:      Check that a .setup file exists
# Arguments:    $1 - the file name
# Returns:      Nothing
{
    G_BREAKOUT=0

    # Check for the .setup file, must be readable and end in .setup
    if [[ -z $1 ]]; then
        show_usage=0
        g_error=$ERROR
        g_errmsg=".setup file name not supplied";
    else 
        if [[ ! -e $1 ]]; then
            # The file simply does not exist. Report but don't quit.
            show_usage=0
            g_error=$WARN
            g_errmsg="$1 not found. Skipping...";
        elif [[ ( ! -r $1 ) ]]; then
            show_usage=0
            g_error=$ERROR
            g_errmsg="$1 not found or name does not end in .setup";
        elif [[ ( $1 != *.setup ) ]]; then
                show_usage=0
                g_error=$ERROR
                g_errmsg="$1 not found or name does not end in .setup";
        fi
    fi

    # Quit on error
    [[ $g_error -eq $ERROR ]] && {
        [[ $show_usage -eq 1 ]] && usage
        echo -e "ERROR: $g_errmsg"
        exit 4
    }
    [[ $g_error -eq $WARN ]] && {
        [[ $show_usage -eq 1 ]] && usage
        G_BREAKOUT=1
        echo -e "WARNING: $g_errmsg"
    }
}

# ----------------------------------------------------------------------------
sanity_check()
# ----------------------------------------------------------------------------
# Purpose:      Check program options. Exit (4) on insanity.
# Arguments:    None
# Returns:      Nothing
{
    local show_usage=0
    g_error=0

    # Check for the .setup file type
    [[ -z $gsetupfiletype ]] && {
        show_usage=1
        g_error=$ERROR
        g_errmsg="Setup file type not supplied."
    }
    # Don't clobber (unless forced)
    #if [[ -e $gfnnewconfig && $gforce -eq $FALSE ]]; then
    #    g_error=$ERROR
    #    g_errmsg="Config file $gfnnewconfig exists already and will"
    #    g_errmsg="$g_errmsg not overwrite.";
    #fi

    # Quit on error
    [[ $g_error -gt 0 ]] && {
        [[ $show_usage -eq 1 ]] && usage
        echo -e "ERROR: $g_errmsg"
        exit 4
    }

    ##### TODO ########
    #
    #  FT_HOSTS depends on FT_HOSTTEMPLATES
}

# ---------------------------------------------------------------------------
echo_warning_header()
# ---------------------------------------------------------------------------
# Purpose:      Echo the standard header to stdout
# Arguments:    None
# Returns:      Nothing
{
    echo "#################################################################"
    echo "#         THIS FILE WAS CREATED BY THE CSV2NAG SCRIPT           #"
    echo "#   DON'T MODIFY THIS FILE. ALL CHANGES WILL BE OVERWRITTEN     #"
    echo "#################################################################"
    echo
}

# ---------------------------------------------------------------------------
add_servicegroup_entries()
# ---------------------------------------------------------------------------
# Purpose:      Create servicegroups file. This file simply defines empty
#               servicegroups. Members are declared in services files.
# Arguments:    $1 - servicegroup entries
# Returns:      Nothing
{
    local a

    echo "$1 " | while read -d" " a
    do
        echo "$a" >>$gfnsvcgrpsetupauto
    done

    # Remove duplicates
    sort -u $gfnsvcgrpsetupauto >$gfnsvcgrpsetupauto.tmp
    mv $gfnsvcgrpsetupauto.tmp $gfnsvcgrpsetupauto
}

# ---------------------------------------------------------------------------
add_hostgroup_entries()
# ---------------------------------------------------------------------------
# Purpose:      Create hostgroups file. This file simply defines empty
#               hostgroups. Members are declared in hosts files.
# Arguments:    $1 - hostgroup entries
# Returns:      Nothing
{
    local a

    echo "$1 " | while read -d" " a
    do
        echo "$a" >>$gfnhostgrpsetupauto
    done

    # Remove duplicates
    sort -u $gfnhostgrpsetupauto >$gfnhostgrpsetupauto.tmp
    mv $gfnhostgrpsetupauto.tmp $gfnhostgrpsetupauto
}

# ---------------------------------------------------------------------------
get_servicegroup_line()
# ---------------------------------------------------------------------------
# Purpose:      Echo the value of the second key (the Nagios alias) in
#               the $gfnsvcgrpsetup file.
# Arguments:    $1 - the servicegroup to lookup
# Returns:      Nothing
{
    local a
    a=`grep "^$1\>" $gfnsvcgrpsetup`
    echo $a
}

# ---------------------------------------------------------------------------
get_hostgroup_line()
# ---------------------------------------------------------------------------
# Purpose:      Echo the value of the second key (the Nagios alias) in
#               the $gfnhostgrpsetup file.
# Arguments:    $1 - the hostgroup to lookup
# Returns:      Nothing
{
    local a
    a=`grep "^$1\>" $gfnhostgrpsetup`
    echo $a
}

# ---------------------------------------------------------------------------
are_you_sure()
# ---------------------------------------------------------------------------
{
    [[ $user_is_sure -eq $TRUE ]] && return
    local a
    echo "*"
    echo "* NAGIOS CONFIGURATION FILES WILL BE OVERWRITTEN."
    echo "*"
    echo -n "Are you sure you want to continue? (y/[n]) > "
    read a
    [[ $a != 'y' ]] && exit 0
    echo
}

# ---------------------------------------------------------------------------
setup_name_mangling()
# ---------------------------------------------------------------------------
# Set up the name mangling echo if DCC=1, else plain echo.
# No arguments.
# Returns: Nothing
{
    if [[ $DCC -eq 1 ]]
    then
        # -------------------------------------------------------------------
        function Echo {
        # -------------------------------------------------------------------
        # Expects input to be in the form:
        #   ([:space:])*(WORD)+([:space:])*([,]*MANGLE_ME)+
        # Outputs the entire string but with MANGLE_ME mangled.
        # $1 - the string to output in mangled form
        # $2 - if set [to anything at all] then ` will be replaced with ,
            local str="$1" P="${gconfigprefix}-"

            [[ -n $2 ]] && R='s/`/,/g'

            echo "$1" | sed \
                "s/^\( \+[^ ]\+ \+[+,]*\)\([^,]*\)/\1$P\2/g;s/,/,$P/g;$R"
        }
    else
        # -------------------------------------------------------------------
        function Echo { echo "$1"; }
        # -------------------------------------------------------------------
    fi
}

# ---------------------------------------------------------------------------
#
# CREATE FUNCTIONS
#
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
create_host_files()
# ---------------------------------------------------------------------------
# Purpose:      Create hosts file and hostgroups file
# Arguments:    None
# Returns:      Nothing
{
    local a alias hostname ipaddr hosttempl shostgroups
    local fnnewconfig disable

    check_for_setup_file "$gfnhostsetup"
    [[ $G_BREAKOUT -eq 1 ]] && return

    # Need:
    #   o Template name to use   - From hosttemplates.setup
    #   o Alias                  - FQDN name from hosts.setup (field 1)
    #   o Host name              - From FQDN Alias
    #   o IP Address             - From hosts.setup (field 2)

    # Delete host config directories
    #find . -depth -type d -name "$gconfigprefix*" -exec rm -rf {} \;
    rm -rf $gconfigprefix-nodes/*
    :>$gfnhostgrpsetupauto

    while read a; do 
        [[ -z $a || $a == "#"* ]] && continue

        # Process $gsetupfile line

        IFS=, read hostname alias ipaddr hosttempl shostgroups \
            contacts contact_groups active_checks servicesets \
            disable \
            displayname parents command initialstate maxcheckattempts \
            checkinterval retryinterval passivechecks checkperiod \
            obsessoverhost checkfreshness freshnessthresh eventhandler \
            eventhandlerenabled lowflapthresh highflapthresh \
            flapdetectionenabled flapdetectionoptions processperfdata \
            retainstatusinfo retainnonstatusinfo notifinterval \
            firstnotifdelay notifperiod notifopts notifications_enabled \
            stalkingoptions notes notes_url icon_image icon_image_alt \
            vrml_image statusmap_image coords2d coords3d action_url x \
            < <(echo "$a")

        [[ "$disable" == "1" || \
           ( $DCC -eq 1 && "$disable" == "2" ) ]] && continue

        prihostgroup="${shostgroups%% *}"

        [[ $DCC -eq 1 ]] && {
            shostgroups=`echo "$shostgroups" \
                | sed "s/^/${gconfigprefix}-/;s/ / ${gconfigprefix}-/g"`
        }

        # Create the file. Filename is the hostname.

        [[ -z $prihostgroup ]] && prihostgroup="empty-hostgroup"
        mkdir -p $gconfigprefix-nodes/$prihostgroup
        
        fnnewconfig="$gconfigprefix-nodes/$prihostgroup/$hostname.$gconfigext"

        [[ -e $fnnewconfig ]] && {
            ## TODO ##
            ## check for duplicate hostnames in $gfnhostsetup.
            echo "ERROR: Duplicate host name ($hostname)"
            exit 4
        }

        echo "Creating hosts file $fnnewconfig"

        # Write the host stanza

        # Redirect all stdout output to gfnnewconfig
        exec 3>&1 >$fnnewconfig

        echo_warning_header
        echo "define host {"
        Echo "       use             $hosttempl"
        echo "       host_name       $hostname"
        echo "       alias           $alias"
        echo "       address         $ipaddr"
        [[ -n $shostgroups ]] && {
            exec 1>&3 3>&-
            add_hostgroup_entries "$shostgroups"
            exec 3>&1 >>$fnnewconfig
            t="${shostgroups// /,}"
            echo "       hostgroups      $t"
        }
        [[ -n $contacts ]] && {
            ## TODO ## CHECK contact exists in gateway_contacts.setup
            t="${contacts// /,}"
            Echo "       contacts        +$t"
        }
        [[ $active_checks == 0 ]] && {
            echo "       active_checks_enabled 0"
        }
        [[ -n $contact_groups ]] && {
            ## TODO ## CHECK contact_group exists in gateway_contacts.setup
            t="${contact_groups// /,}"
            Echo "       contact_groups  +$t"
        }
        [[ -n $displayname ]] && {
            echo "       display_name $displayname"
        }
        [[ -n $parents ]] && {
            Echo "       parents $parents"
        }
        [[ -n $command ]] && {
            Echo "       check_command $command"
        }
        [[ -n $initialstate ]] && {
            echo "       initial_state $initialstate"
        }
        [[ -n $maxcheckattempts ]] && {
            echo "       max_check_attempts $maxcheckattempts"
        }
        [[ -n $checkinterval ]] && {
            echo "       check_interval $checkinterval"
        }
        [[ -n $retryinterval ]] && {
            echo "       retry_interval $retryinterval"
        }
        [[ -n $passivechecks ]] && {
            if [[ $passivechecks == 0 ]]; then
                echo "       passive_checks_enabled 0"
            else
                echo "       passive_checks_enabled 1"
            fi
        }
        [[ -n $checkperiod ]] && {
            Echo "       check_period $checkperiod"
        }
        [[ -n $obsessoverhost ]] && {
            if [[ $obsessoverhost == 1 ]]; then
                echo "       obsess_over_host 1"
            else
                echo "       obsess_over_host 0"
            fi
        }
        [[ -n $checkfreshness ]] && {
            if [[ $checkfreshness == 0 ]]; then
                echo "       check_freshness 0"
            else
                echo "       check_freshness 1"
            fi
        }
        [[ -n $freshnessthresh ]] && {
            echo "       freshness_threshold $freshnessthresh"
        }
        [[ -n $eventhandler ]] && {
            echo "       event_handler $eventhandler"
        }
        [[ -n $eventhandlerenabled ]] && {
            if [[ $eventhandlerenabled == 0 ]]; then
                echo "       event_handler_enabled 0"
            else
                echo "       event_handler_enabled 1"
            fi
        }
        [[ -n $lowflapthresh ]] && {
            echo "       low_flap_threshold $lowflapthresh"
        }
        [[ -n $highflapthresh ]] && {
            echo "       high_flap_threshold $highflapthresh"
        }
        [[ -n $flapdetectionenabled ]] && {
            if [[ $flapdetectionenabled == 0 ]]; then
                echo "       flap_detection_enabled 0"
            else
                echo "       flap_detection_enabled 1"
            fi
        }
        [[ -n $flapdetectionoptions ]] && {
            echo -n "       flap_detection_options "
            echo "$flapdetectionoptions" | tr " " ,
        }
        [[ -n $processperfdata ]] && {
            if [[ $processperfdata == 0 ]]; then
                echo "       process_perf_data 0"
            else
                echo "       process_perf_data 1"
            fi
        }
        [[ -n $retainstatusinfo ]] && {
            if [[ $retainstatusinfo == 0 ]]; then
                echo "       retain_status_information 0"
            else
                echo "       retain_status_information 1"
            fi
        }
        [[ -n $retainnonstatusinfo ]] && {
            if [[ $retainnonstatusinfo == 0 ]]; then
                echo "       retain_nonstatus_information 0"
            else
                echo "       retain_nonstatus_information 0"
            fi
        }
        [[ -n $notifinterval ]] && {
            echo "       notification_interval $notifinterval"
        }
        [[ -n $firstnotifdelay ]] && {
            echo "       first_notifdelay $firstnotifdelay"
        }
        [[ -n $notifperiod ]] && {
            Echo "       notification_period $notifperiod"
        }
        [[ -n $notifopts ]] && {
            echo -n "       notification_options "
            echo "$notifopts" | tr " " ,
        }
        [[ -n $notifications_enabled ]] && {
            if [[ $notifications_enabled == 0 ]]; then
                echo "       notifications_enabled 0"
            else
                echo "       notifications_enabled 1"
            fi
        }
        [[ -n $stalkingoptions ]] && {
            echo -n "       stalking_options "
            echo "$stalkingoptions" | tr " " ,
        }
        [[ -n $notes ]] && {
            echo "       notes $notes"
        }
        [[ -n $notes_url ]] && {
            echo "       notes_url $notes_url"
        }
        [[ -n $icon_image ]] && {
            echo "       icon_image $icon_image"
        }
        [[ -n $icon_image_alt ]] && {
            echo "       icon_image_alt $icon_image_alt"
        }
        [[ -n $vrml_image ]] && {
            echo "       vrml_image $vrml_image"
        }
        [[ -n $statusmap_image ]] && {
            echo "       statusmap_image $statusmap_image"
        }
        [[ -n $coords2d ]] && {
            echo "       2d_coords $coords2d"
        }
        [[ -n $coords3d ]] && {
            echo "       3d_coords $coords3d"
        }
        [[ -n $action_url ]] && {
            echo "       action_url $action_url"
        }
        echo "}"
        echo

        # Un-redirect stdout output
        exec 1>&3 3>&-

    done <$gfnhostsetup

    create_hostgroups
}

# ---------------------------------------------------------------------------
create_servicegroups()
# ---------------------------------------------------------------------------
# Purpose:      Create servicegroup file from $gfnsvcgrpsetupauto, which is
#               automatically created when create_service_entries is run.
# Arguments:    None
# Returns:      Nothing
{
    local alias

    echo "Creating servicegroups file $gfnsvcgrpcfg"
    exec 3>&1 >$gfnsvcgrpcfg
    echo_warning_header
    cat $gfnsvcgrpsetupauto | \
    while read a
    do
        echo "define servicegroup {"
        echo "    servicegroup_name    $a"
        exec 1>&3 3>&-
        line=`get_servicegroup_line "$a"`
        IFS=, read dummy alias disable members servicegroupmembers \
            notes notes_url action_url x < <( echo "$line")
        [[ "$disable" == "1" ]] && continue
        [[ -z "$alias" ]] && {
            echo
            echo "ERROR: Entry for servicegroup, $a, is not defined in the "
            echo "servicegroups file $gfnsvcgrpsetup. Aborting."
            exit 5
        }
        exec 3>&1 >>$gfnsvcgrpcfg
        echo "    alias                $alias"  
        [[ -n $members ]] && {
            echo -n "    members           "
            echo "$members" | tr " " ,
        }
        [[ -n $hostgroupmembers ]] && {
            echo -n "    servicegroup_members "
            echo "$hostgroupmembers" | tr " " ,
        }
        [[ -n $notes ]] && {
            echo "    notes             $notes"
        }
        [[ -n $notes_url ]] && {
            echo "    notes_url         $notes_url"
        }
        [[ -n $action_url ]] && {
            echo "    action_url        $action_url"
        }
        echo "}"
        echo
    done
    exec 1>&3 3>&-

}

# ---------------------------------------------------------------------------
create_hostgroups()
# ---------------------------------------------------------------------------
# Purpose:      Create hostgroups file from $gfnhostgrpsetup, which is
#               automatically created when create_host_files is run.
# Arguments:    None
# Returns:      Nothing
{
    local alias line prefix=

    echo "Creating hostgroups file $gfnhostgrpcfg"

    exec 3>&1 >$gfnhostgrpcfg

    echo_warning_header

    [[ $DCC -eq 1 ]] && prefix="${gconfigprefix}-"

    while read a
    do
        exec 1>&3 3>&-
        line=`get_hostgroup_line "$a"`
        IFS=, read dummy alias disable members hostgroupmembers \
            notes notes_url action_url x < <( echo "$line")
        [[ "$disable" == "1" ]] && continue
        [[ -z "$alias" ]] && {
            echo "ERROR: Entry for hostgroup, $a, is not defined in the "
            echo "hostgroups file $gfnhostgrpsetup. Aborting."
            exit 5
        }
        exec 3>&1 >>$gfnhostgrpcfg
        echo "define hostgroup {"
        Echo "    hostgroup_name    $a"
        echo "    alias             $alias"  
        [[ -n $members ]] && {
            echo -n "    members           "
            echo "$members" | tr " " ,
        }
        [[ -n $hostgroupmembers ]] && {
            t=`echo "$hostgroupmembers" | tr " " ,`
            Echo "    hostgroup_members $t"
        }
        [[ -n $notes ]] && {
            echo "    notes             $notes"
        }
        [[ -n $notes_url ]] && {
            echo "    notes_url         $notes_url"
        }
        [[ -n $action_url ]] && {
            echo "    action_url        $action_url"
        }
        echo "}"
        echo
    done < <( cat $gfnhostgrpsetupauto | sed "s/^${prefix}//" )
    exec 1>&3 3>&-

}

# ---------------------------------------------------------------------------
create_service_entries()
# ---------------------------------------------------------------------------
# Purpose:      Create services in the hosts files from $gfnsvcsetup.
# Arguments:    None
# Returns:      Nothing
{
    local hfile alias hostname stemplate scommand sdescr cv

    check_for_setup_file "$gfnhostsetup"
    [[ $G_BREAKOUT -eq 1 ]] && return
    check_for_setup_file "$gfnsvcsetup"
    [[ $G_BREAKOUT -eq 1 ]] && return
    :>$gfnsvcgrpsetupauto

    # Read hosts list from the $gfnhostsetup file
    while read a; do 
        [[ -z $a || $a == "#"* ]] && continue

        IFS=, read hostname x x x x x x x x disable x < <(echo "$a")
        
        [[ "$disable" == "1" || \
           ( $DCC -eq 1 && "$disable" == "2" ) ]] && continue

        # Find the hostname.cfg file to append to in xxx-nodes directory
        hfile=`find $gconfigprefix-nodes -name $hostname.cfg`
        [[ -w $hfile ]] || {
            echo
            echo "ERROR: Couldn't find $hostname.cfg"
            echo "       Was this script run with hosts TYPE first?"
            echo " Aborting"
            echo
            exit 5
        }

        echo "Adding services to $hfile"

        exec 3>&1 >>$hfile

        # Now process all the entries in $gfnsvcsetup that match hostname
        grep "^$hostname," $gfnsvcsetup | while read -r b; do

            IFS=, read -r dummy stemplate scommand sdescr svcgroups contacts \
                cgroups freshness active_checks customvars disable \
                displayname isvolatile initialstate maxcheckattempts \
                checkinterval retryinterval passivechecks checkperiod \
                obsessoverservice manfreshnessthresh checkfreshness \
                eventhandler eventhandlerenabled \
                lowflapthresh highflapthresh flapdetectionenabled \
                flapdetectionoptions processperfdata retainstatusinfo \
                retainnonstatusinfo notifinterval firstnotifdelay \
                notifperiod notifopts notifications_enabled stalkingoptions \
                notes notes_url action_url icon_image icon_image_alt \
                vrml_image statusmap_image coords2d coords3d x \
                < <(echo "$b")

            [[ "$disable" == "1" || \
               ( $DCC -eq 1 && "$disable" == "2" ) ]] && continue


            [[ -n $customvars ]] && customvars="${customvars//\`/,}"

            [[ $DCC -eq 1 && -z $freshness ]] && freshness=600

            echo "define service {"
            echo "        host_name                       $hostname"
            Echo "        use                             $stemplate"
            echo "        service_description             $sdescr"
            if [[ -n $freshness ]]; then 
                sc=${scommand#$REMOTE_EXECUTOR!} ; sc=${sc%% *}
                sc="$FRESHNESS_CHECK_COMMAND!$sc"
                Echo "        check_command                   $sc" do_replace
                [[ $DCC -ne 1 ]] && {
                    echo "        active_checks_enabled           0"
                }
                echo "        passive_checks_enabled          1"
                echo -n "        freshness_threshold             "
                echo "$freshness"
                echo "        check_freshness                 1"
            else
                scommand="${scommand//\`/,}"
                echo "        check_command                   $scommand"
                [[ -n $active_checks ]] && {
                    if [[ $active_checks == 0 ]]; then
                        echo "        active_checks_enabled           0"
                    else
                        echo "        active_checks_enabled           1"
                    fi
                }
                [[ -n $passivechecks ]] && {
                    if [[ $passivechecks == 0 ]]; then
                        echo "        passive_checks_enabled          0"
                    else
                        echo "        passive_checks_enabled          1"
                    fi
                }
                [[ -n $checkfreshness ]] && {
                    if [[ $checkfreshness == 1 ]]; then
                        echo "        check_freshness                 1"
                    else
                        echo "        check_freshness                 0"
                    fi
                }
                [[ -n $manfreshnessthresh ]] && {
                        echo -n "        check_freshness                 "
                        echo "$manfreshnessthresh"
                }
            fi
            [[ -n $svcgroups ]] && {
                exec 1>&3 3>&-
                add_servicegroup_entries "$svcgroups"
                exec 3>&1 >>$hfile
                echo -n "        servicegroups                   "
                echo "${svcgroups// /,}"
            }
            [[ -n $contacts ]] && {
                t="${contacts// /,}"
                Echo "        contacts                        $t"
            }
            [[ -n $cgroups ]] && {
                t="${cgroups// /,}"
                Echo "        contact_groups                  $t"
            }
            [[ -n $customvars ]] && {
                while read -d"," cv
                do
                    echo "        ${cv%%|*}                  ${cv##*|}"
                done < <(echo "$customvars,")
            }
            [[ -n $isvolatile ]] && {
                echo "       is_volatile $isvolatile"
            }
            [[ -n $displayname ]] && {
                echo "       display_name $displayname"
            }
            [[ -n $initialstate ]] && {
                echo "       initial_state $initialstate"
            }
            [[ -n $maxcheckattempts ]] && {
                echo "       max_check_attempts $maxcheckattempts"
            }
            [[ -n $checkinterval ]] && {
                echo "       check_interval $checkinterval"
            }
            [[ -n $retryinterval ]] && {
                echo "       retry_interval $retryinterval"
            }
            [[ -n $checkperiod ]] && {
                Echo "       check_period $checkperiod"
            }
            [[ -n $obsessoverservice ]] && {
                if [[ $obsessoverservice == 1 ]]; then
                    echo "       obsess_over_service 1"
                else
                    echo "       obsess_over_service 0"
                fi
            }
            [[ -n $freshnessthresh ]] && {
                echo "       freshness_threshold $freshnessthresh"
            }
            [[ -n $eventhandler ]] && {
                echo "       event_handler $eventhandler"
            }
            [[ -n $eventhandlerenabled ]] && {
                if [[ $eventhandlerenabled == 0 ]]; then
                    echo "       event_handler_enabled 0"
                else
                    echo "       event_handler_enabled 1"
                fi
            }
            [[ -n $lowflapthresh ]] && {
                echo "       low_flap_threshold $lowflapthresh"
            }
            [[ -n $highflapthresh ]] && {
                echo "       high_flap_threshold $highflapthresh"
            }
            [[ -n $flapdetectionenabled ]] && {
                if [[ $flapdetectionenabled == 0 ]]; then
                    echo "       flap_detection_enabled 0"
                else
                    echo "       flap_detection_enabled 1"
                fi
            }
            [[ -n $flapdetectionoptions ]] && {
                echo -n "       flap_detection_options "
                echo "${flapdetectionoptions// /,}"
            }
            [[ -n $processperfdata ]] && {
                if [[ $processperfdata == 0 ]]; then
                    echo "       process_perf_data 0"
                else
                    echo "       process_perf_data 1"
                fi
            }
            [[ -n $retainstatusinfo ]] && {
                if [[ $retainstatusinfo == 0 ]]; then
                    echo "       retain_status_information 0"
                else
                    echo "       retain_status_information 1"
                fi
            }
            [[ -n $retainnonstatusinfo ]] && {
                if [[ $retainnonstatusinfo == 0 ]]; then
                    echo "       retain_nonstatus_information 0"
                else
                    echo "       retain_nonstatus_information 0"
                fi
            }
            [[ -n $notifinterval ]] && {
                echo "       notification_interval $notifinterval"
            }
            [[ -n $firstnotifdelay ]] && {
                echo "       first_notifdelay $firstnotifdelay"
            }
            [[ -n $notifperiod ]] && {
                Echo "       notification_period $notifperiod"
            }
            [[ -n $notifopts ]] && {
                echo -n "       notification_options "
                echo "${notifopts// /,}"
            }
            [[ -n $notifications_enabled ]] && {
                if [[ $notifications_enabled == 0 ]]; then
                    echo "       notifications_enabled 0"
                else
                    echo "       notifications_enabled 1"
                fi
            }
            [[ -n $stalkingoptions ]] && {
                echo -n "       stalking_options "
                echo "${stalkingoptions// /,}"
            }
            [[ -n $notes ]] && {
                echo "       notes $notes"
            }
            [[ -n $notes_url ]] && {
                echo "       notes_url $notes_url"
            }
            [[ -n $icon_image ]] && {
                echo "       icon_image $icon_image"
            }
            [[ -n $icon_image_alt ]] && {
                echo "       icon_image_alt $icon_image_alt"
            }
            [[ -n $vrml_image ]] && {
                echo "       vrml_image $vrml_image"
            }
            [[ -n $statusmap_image ]] && {
                echo "       statusmap_image $statusmap_image"
            }
            [[ -n $coords2d ]] && {
                echo "       2d_coords $coords2d"
            }
            [[ -n $coords3d ]] && {
                echo "       3d_coords $coords3d"
            }
            [[ -n $action_url ]] && {
                echo "       action_url $action_url"
            }
            echo "}"
            echo

        done # < <( grep "^$hostname," $gfnsvcsetup )
        # Bash bug? when run in a function file descriptors are left open.

        exec 1>&3 3>&-

    done <$gfnhostsetup

    create_servicegroups
}

# ---------------------------------------------------------------------------
create_servicetemplates()
# ---------------------------------------------------------------------------
# Purpose:      Create servicetemplates file
# Arguments:    None
# Returns:      Nothing
{
    local a name use contacts cgroups normchecki retrchecki notifperiod
    local notifopts notifinter checki disable checkperiod
    local maxcheckattempts

    check_for_setup_file "$gfnsvctmplsetup"
    [[ $G_BREAKOUT -eq 1 ]] && return

    echo "Creating servicetemplates file $gfnsvctmplcfg"

    # Redirect all stdout output to gfnnewconfig
    exec 3>&1 >$gfnsvctmplcfg

    echo_warning_header

    while read a; do 
        [[ -z $a || $a == "#"* ]] && continue

        IFS=, read name use contacts cgroups notifopts checki normchecki \
            retrchecki notifinter notifperiod disable checkperiod \
            maxcheckattempts \
            freshnessthresh activechecks customvars isvolatile \
            initialstate passivechecks obsessoverservice \
            manfreshnessthresh checkfreshness eventhandler \
            eventhandlerenabled lowflapthresh highflapthresh \
            flapdetectionenabled flapdetectionoptions processperfdata \
            retainstatusinfo retainnonstatusinfo firstnotifdelay \
            notifications_enabled stalkingoptions notes notes_url \
            action_url icon_image icon_image_alt vrml_image \
            statusmap_image coords2d coords3d \
            < <(echo "$a")

        [[ "$disable" == "1" ]] && continue

        echo "define service {"
        Echo "        name                            $name"
        [[ -n $use ]] && {
            Echo "       use                          $use"
        }
        if [[ -n $freshness ]]; then 
            echo "        check_command                   no-checks-received"
            [[ $DCC -ne 1 ]] && {
                echo "        active_checks_enabled           0"
            }
            echo "        passive_checks_enabled          1"
            echo -n "        freshness_threshold             "
            echo "$freshness"
            echo "        check_freshness                 1"
        else
            echo "        check_command                   $scommand"
            [[ -n $activechecks ]] && {
                if [[ $activechecks == 0 ]]; then
                    echo "        active_checks_enabled           0"
                else
                    echo "        active_checks_enabled           1"
                fi
            }
            [[ -n $passivechecks ]] && {
                if [[ $passivechecks == 0 ]]; then
                    echo "        passive_checks_enabled          0"
                else
                    echo "        passive_checks_enabled          1"
                fi
            }
            [[ -n $checkfreshness ]] && {
                if [[ $checkfreshness == 1 ]]; then
                    echo "        check_freshness                 1"
                else
                    echo "        check_freshness                 0"
                fi
            }
            [[ -n $manfreshnessthresh ]] && {
                    echo -n "        check_freshness                 "
                    echo "$manfreshnessthresh"
            }
        fi
        [[ -n $contacts ]] && {
            t="${contacts// /,}"
            Echo "        contacts                        $t"
        }
        [[ -n $cgroups ]] && {
            t="${cgroups// /,}"
            Echo "        contact_groups                  $t"
        }
        [[ -n $customvars ]] && {
            while read -d"," cv
            do
                echo "        ${cv%%|*}                  ${cv##*|}"
            done < <(echo "$customvars,")
        }
        [[ -n $isvolatile ]] && {
            echo "       is_volatile $isvolatile"
        }
        [[ -n $initialstate ]] && {
            echo "       initial_state $initialstate"
        }
        [[ -n $maxcheckattempts ]] && {
            echo "       max_check_attempts $maxcheckattempts"
        }
        [[ -n $checki ]] && {
            echo "       check_interval $checki"
        }
        [[ -n $retrchecki ]] && {
            echo "       retry_interval $retrchecki"
        }
        [[ -n $checkperiod ]] && {
            Echo "       check_period $checkperiod"
        }
        [[ -n $obsessoverservice ]] && {
            if [[ $obsessoverservice == 1 ]]; then
                echo "       obsess_over_service 1"
            else
                echo "       obsess_over_service 0"
            fi
        }
        [[ -n $freshnessthresh ]] && {
            echo "       freshness_threshold $freshnessthresh"
        }
        [[ -n $eventhandler ]] && {
            echo "       event_handler $eventhandler"
        }
        [[ -n $eventhandlerenabled ]] && {
            if [[ $eventhandlerenabled == 0 ]]; then
                echo "       event_handler_enabled 0"
            else
                echo "       event_handler_enabled 1"
            fi
        }
        [[ -n $lowflapthresh ]] && {
            echo "       low_flap_threshold $lowflapthresh"
        }
        [[ -n $highflapthresh ]] && {
            echo "       high_flap_threshold $highflapthresh"
        }
        [[ -n $flapdetectionenabled ]] && {
            if [[ $flapdetectionenabled == 0 ]]; then
                echo "       flap_detection_enabled 0"
            else
                echo "       flap_detection_enabled 1"
            fi
        }
        [[ -n $flapdetectionoptions ]] && {
            echo -n "       flap_detection_options "
            echo "${flapdetectionoptions// /,}"
        }
        [[ -n $processperfdata ]] && {
            if [[ $processperfdata == 0 ]]; then
                echo "       process_perf_data 0"
            else
                echo "       process_perf_data 1"
            fi
        }
        [[ -n $retainstatusinfo ]] && {
            if [[ $retainstatusinfo == 0 ]]; then
                echo "       retain_status_information 0"
            else
                echo "       retain_status_information 1"
            fi
        }
        [[ -n $retainnonstatusinfo ]] && {
            if [[ $retainnonstatusinfo == 0 ]]; then
                echo "       retain_nonstatus_information 0"
            else
                echo "       retain_nonstatus_information 1"
            fi
        }
        [[ -n $notifinter ]] && {
            echo "       notification_interval $notifinter"
        }
        [[ -n $firstnotifdelay ]] && {
            echo "       first_notifdelay $firstnotifdelay"
        }
        [[ -n $notifperiod ]] && {
            Echo "       notification_period $notifperiod"
        }
        [[ -n $notifopts ]] && {
            echo -n "       notification_options "
            echo "${notifopts// /,}"
        }
        [[ -n $notifications_enabled ]] && {
            if [[ $notifications_enabled == 0 ]]; then
                echo "       notifications_enabled 0"
            else
                echo "       notifications_enabled 1"
            fi
        }
        [[ -n $stalkingoptions ]] && {
            echo -n "       stalking_options "
            echo "${stalkingoptions// /,}"
        }
        [[ -n $notes ]] && {
            echo "       notes $notes"
        }
        [[ -n $notes_url ]] && {
            echo "       notes_url $notes_url"
        }
        [[ -n $icon_image ]] && {
            echo "       icon_image $icon_image"
        }
        [[ -n $icon_image_alt ]] && {
            echo "       icon_image_alt $icon_image_alt"
        }
        [[ -n $vrml_image ]] && {
            echo "       vrml_image $vrml_image"
        }
        [[ -n $statusmap_image ]] && {
            echo "       statusmap_image $statusmap_image"
        }
        [[ -n $coords2d ]] && {
            echo "       2d_coords $coords2d"
        }
        [[ -n $coords3d ]] && {
            echo "       3d_coords $coords3d"
        }
        [[ -n $action_url ]] && {
            echo "       action_url $action_url"
        }
        echo "       register 0"
        echo "}"
        echo

    done <$gfnsvctmplsetup

    # Un-redirect stdout output
    exec 1>&3 3>&-
}

# ---------------------------------------------------------------------------
create_hosttemplates()
# ---------------------------------------------------------------------------
# Purpose:      Create hosttemplates file
# Arguments:    None
# Returns:      Nothing
{
    local a name use contacts cgroups normchecki retrchecki notifperiod
    local notifopts checki disable checkperiod maxcheckattempts 
    local checkcommand notifinterval

    check_for_setup_file "$gfnhostmplsetup"
    [[ $G_BREAKOUT -eq 1 ]] && return

    echo "Creating hosttemplates file $gfnhostmplcfg"

    # Redirect all stdout output to gfnnewconfig
    exec 3>&1 >$gfnhostmplcfg

    echo_warning_header

    [[ $DCC -eq 1 && -r $gfnmandatorygroupcfg ]] && {
        # Read mandatory group
        read a <$gfnmandatorygroupcfg
        mandgroup=`echo "$a " | sed 's/^ *//;s/ *$//;s/  / /g' | tr " " ,`
    }

    while read a; do 
        [[ -z $a || $a == "#"* ]] && continue

        IFS=, read name use contacts cgroups normchecki checki retrchecki \
            notifperiod notifopts disable checkperiod maxcheckattempts \
            checkcommand notifinterval \
            passivechecks obsessoverhost checkfreshness \
            freshnessthresh eventhandler eventhandlerenabled \
            lowflapthresh highflapthresh flapdetectionenabled \
            flapdetectionoptions processperfdata \
            retainstatusinfo retainnonstatusinfo \
            firstnotifdelay notifications_enabled \
            stalkingoptions notes notes_url icon_image \
            icon_image_alt vrml_image statusmap_image coords2d \
            coords3d action_url x \
            < <(echo "$a")

        echo "define host {"
        # not in nagios 3
        #echo "       normal_check_interval        $normchecki"
        #echo "       failure_prediction_enabled   1"
        Echo "       name                         $name"
        echo "       check_interval               $checki"
        echo "       retry_interval               $retrchecki"
        echo "       max_check_attempts           $maxcheckattempts"
        echo "       notification_interval        $notifinterval"
        echo "       register                     0"
        if [[ $notifications_enabled == 0 ]]; then
            echo "       notifications_enabled        0"
        else
            echo "       notifications_enabled        1"
        fi
        if [[ $eventhandlerenabled == 0 ]]; then
            echo "       event_handler_enabled        0"
        else
            echo "       event_handler_enabled        1"
        fi
        if [[ $flapdetectionenabled == 0 ]]; then
            echo "       flap_detection_enabled       0"
        else
            echo "       flap_detection_enabled       1"
        fi
        if [[ $processperfdata == 0 ]]; then
            echo "       process_perf_data            0"
        else
            echo "       process_perf_data            1"
        fi
        if [[ $retainstatusinfo == 0 ]]; then
            echo "       retain_status_information    0"
        else
            echo "       retain_status_information    1"
        fi
        [[ -n $retainnonstatusinfo ]] && {
            if [[ $retainnonstatusinfo == 0 ]]; then
                echo "       retain_nonstatus_information 0"
            else
                echo "       retain_nonstatus_information 1"
            fi
        }
        [[ -n $use ]] && {
            Echo "       use                          $use"
        }
        [[ -n $contacts ]] && {
            t="${contacts// /,}"
            Echo "       contacts                     +$t"
        }
        if [[ $DCC -eq 1 ]]; then
            [[ -n $cgroups || -n $mandgroup ]] && {
                t=`echo "$mandgroup$cgroups" | tr " " ,`
                Echo "       contact_groups               +$t"
            }
        else
            [[ -n $cgroups ]] && {
                echo -n "       contact_groups               +"
                echo "${cgroups// /,}"
            }
        fi
        [[ -n $checkperiod ]] && {
            Echo "       check_period                 $checkperiod"
        }
        [[ -n $checkcommand ]] && {
            Echo "       check_command                $checkcommand"
        }
        [[ -n $notifopts ]] && {
            echo -n "       notification_options         "
            echo "${notifopts// /,}"
        }
        [[ -n $passivechecks ]] && {
            if [[ $passivechecks == 0 ]]; then
                echo "       passive_checks_enabled       0"
            else
                echo "       passive_checks_enabled       1"
            fi
        }
        [[ -n $obsessoverhost ]] && {
            if [[ $obsessoverhost == 1 ]]; then
                echo "       obsess_over_host             1"
            else
                echo "       obsess_over_host             0"
            fi
        }
        [[ -n $checkfreshness ]] && {
            if [[ $checkfreshness == 0 ]]; then
                echo "       check_freshness              0"
            else
                echo "       check_freshness              1"
            fi
        }
        [[ -n $freshnessthresh ]] && {
            echo "       freshness_threshold          $freshnessthresh"
        }
        [[ -n $eventhandler ]] && {
            echo "       event_handler                $eventhandler"
        }
        [[ -n $lowflapthresh ]] && {
            echo "       low_flap_threshold           $lowflapthresh"
        }
        [[ -n $highflapthresh ]] && {
            echo "       high_flap_threshold          $highflapthresh"
        }
        [[ -n $flapdetectionoptions ]] && {
            echo -n "       flap_detection_options        "
            echo "${flapdetectionoptions// /,}"
        }
        [[ -n $firstnotifdelay ]] && {
            echo "       first_notifdelay             $firstnotifdelay"
        }
        [[ -n $notifperiod ]] && {
            Echo "       notification_period          $notifperiod"
        }
        [[ -n $notifopts ]] && {
            echo -n "       notification_options        "
            echo "${notifopts// /,}"
        }
        [[ -n $stalkingoptions ]] && {
            echo -n "       stalking_options            "
            echo "${stalkingoptions// /,}"
        }
        [[ -n $notes ]] && {
            echo "       notes                        $notes"
        }
        [[ -n $notes_url ]] && {
            echo "       notes_url                    $notes_url"
        }
        [[ -n $icon_image ]] && {
            echo "       icon_image                   $icon_image"
        }
        [[ -n $icon_image_alt ]] && {
            echo "       icon_image_alt               $icon_image_alt"
        }
        [[ -n $vrml_image ]] && {
            echo "       vrml_image                   $vrml_image"
        }
        [[ -n $statusmap_image ]] && {
            echo "       statusmap_image              $statusmap_image"
        }
        [[ -n $coords2d ]] && {
            echo "       2d_coords                    $coords2d"
        }
        [[ -n $coords3d ]] && {
            echo "       3d_coords                    $coords3d"
        }
        [[ -n $action_url ]] && {
            echo "       action_url                   $action_url"
        }
        echo "}"
        echo

    done <$gfnhostmplsetup

    # Un-redirect stdout output
    exec 1>&3 3>&-
}

# ---------------------------------------------------------------------------
create_contacts()
# ---------------------------------------------------------------------------
# Purpose:      Create contacts file ($gfncontactscfg)
# Arguments:    None
# Returns:      Nothing
{
    local a cname use alias email srvnotper srvnotopts srvnotcmds
    local hstnotper hstnotopts hstnotcmds cansubmit members disable

    check_for_setup_file "$gfncontactsetup"
    [[ $G_BREAKOUT -eq 1 ]] && return
    check_for_setup_file "$gfncontactgrpsetup"
    [[ $G_BREAKOUT -eq 1 ]] && return

    # Write contacts

    echo "Creating contacts file $gfncontactscfg"

    # Redirect all stdout output to contacts file
    exec 3>&1 >$gfncontactscfg

    echo_warning_header

    echo "#"
    echo "# Contacts"
    echo "#"
    echo

    while read a; do 
        [[ -z $a || $a == "#"* ]] && continue

        IFS=, read cname use alias email srvnotper srvnotopts srvnotcmds \
            hstnotper hstnotopts hstnotcmds cansubmit disable \
            svcnotifenabled hstnotifenabled pager address1 address2 \
            address3 address4 address5 address6 retainstatusinfo \
            retainnonstatusinfo contactgroups x \
            < <(echo "$a")

        echo "define contact {"
        Echo "       contact_name                  $cname"
        [[ -n $use ]] && {
            Echo "       use                           $use"
        }
        echo "       alias                         $alias"
        [[ -n $email ]] && {
            echo "       email                         $email"
        }
        [[ -n $srvnotper ]] && {
            Echo "       service_notification_period   $srvnotper"
        }
        [[ -n $srvnotopts ]] && {
            echo -n "       service_notification_options  "
            echo "${srvnotopts// /,}"
        }
        [[ -n $srvnotcmds ]] && {
            t="${srvnotcmds// /,}"
            Echo "       service_notification_commands $t"
        }
        [[ -n $hstnotper ]] && {
            Echo "       host_notification_period      $hstnotper"
        }
        [[ -n $hstnotopts ]] && {
            echo -n "       host_notification_options     "
            echo "${hstnotopts// /,}"
        }
        [[ -n $hstnotcmds ]] && {
            t="${hstnotcmds// /,}"
            Echo "       host_notification_commands    $t"
        }
        [[ -n $cansubmit ]] && {
            echo "       can_submit_commands           $cansubmit"
        }
        [[ -n $svcnotifenabled ]] && {
            echo "       service_notifications_enabled $svcnotifenabled"
        }
        [[ -n $hstnotifenabled ]] && {
            echo "       host_notifications_enabled    $hstnotifenabled"
        }
        [[ -n $pager ]] && {
            echo "       pager                         $pager"
        }
        [[ -n $address1 ]] && {
            echo "       address1                      $address1"
        }
        [[ -n $address2 ]] && {
            echo "       address2                      $address2"
        }
        [[ -n $address3 ]] && {
            echo "       address3                      $address3"
        }
        [[ -n $address4 ]] && {
            echo "       address4                      $address4"
        }
        [[ -n $address5 ]] && {
            echo "       address5                      $address5"
        }
        [[ -n $address6 ]] && {
            echo "       address6                      $address6"
        }
        [[ -n $retainstatusinfo ]] && {
            echo "       retain_status_information     $retainstatusinfo"
        }
        [[ -n $retainnonstatusinfo ]] && {
            echo "       retain_nonstatus_information  $retainnonstatusinfo"
        }
        [[ -n $contactgroups ]] && {
            t="${contactgroups// /,}"
            Echo "       contactgroups                 $t"
        }
        echo "}"
        echo

    done <$gfncontactsetup

    # Now append contact groups

    echo "#"
    echo "# Contact Groups"
    echo "#"
    echo

    while read a; do 
        [[ -z $a || $a == "#"* ]] && continue

        IFS=, read cname use members < <(echo "$a")

        echo "define contactgroup {"
        Echo "       contactgroup_name             $cname"
        echo "       alias                         $use"
        [[ -n $members ]] && {
            t="${members// /,}"
            Echo "       members                       $t"
        }
        echo "}"
        echo

    done <$gfncontactgrpsetup

    # Un-redirect stdout output
    exec 1>&3 3>&-
}

# ---------------------------------------------------------------------------
create_timeperiods()
# ---------------------------------------------------------------------------
# Purpose:      Create timeperiods file ($gfntimeperiodcfg)
# Arguments:    None
# Returns:      Nothing
{
    local a b name alias definition exclude disable

    check_for_setup_file "$gfntimeperiodsetup"
    [[ $G_BREAKOUT -eq 1 ]] && return

    echo "Creating timeperiods file $gfntimeperiodcfg"

    # Redirect all stdout output to contacts file
    exec 3>&1 >$gfntimeperiodcfg

    echo_warning_header

    while read a; do 
        [[ -z $a || $a == "#"* ]] && continue

        IFS=, read name alias definition exclude disable exception x \
            < <(echo "$a")

        [[ -n $definition ]] && definition=$(echo "$definition" | tr '`' ',')
        [[ -n $exception ]] && exception=$(echo "$exception" | tr '`' ',')
        alias=$(echo "$alias" | tr '`' ',')

        echo "define timeperiod {"
        Echo "       timeperiod_name   $name"
        echo "       alias             $alias"
        [[ -n $definition ]] && {
            while read -d"," b
            do
                printf "       %-17s ${b##*|}\n" "${b%%|*}"
            done < <(echo "$definition,")
        }
        [[ -n $exception ]] && {
            while read -d"," b
            do
                printf "       %-17s ${b##*|}\n" "${b%%|*}"
            done < <(echo "$exception,")
        }
        [[ -n $exclude ]] && {
            t="${exclude// /,}"
            Echo "       exclude                       $t"
        }
        echo "}"
        echo

    done <$gfntimeperiodsetup

    # Un-redirect stdout output
    exec 1>&3 3>&-
}

# ---------------------------------------------------------------------------
create_commands()
# ---------------------------------------------------------------------------
# Purpose:      Create commands file ($gfncommandcfg)
# Arguments:    None
# Returns:      Nothing
{
    local a name command disable

    check_for_setup_file "$gfncommandsetup"
    [[ $G_BREAKOUT -eq 1 ]] && return

    echo "Creating commands file $gfncommandcfg"

    # Redirect all stdout output to contacts file
    exec 3>&1 >$gfncommandcfg

    echo_warning_header

    while read -r a; do 
        [[ -z $a || $a == "#"* ]] && continue

        IFS=, read -r name command disable x < <(echo "$a")

        [[ -n $command ]] && command=$(echo "$command" | tr '`' ',')

        echo "define command {"
        Echo "       command_name $name"
        echo "       command_line $command"
        echo "}"
        echo

    done <$gfncommandsetup

    # Un-redirect stdout output
    exec 1>&3 3>&-
}

# ---------------------------------------------------------------------------
create_servicedeps()
# ---------------------------------------------------------------------------
# Purpose:      Create servicedeps file ($gfnsvcdepcfg)
# Arguments:    None
# Returns:      Nothing
{
    local a name command disable

    check_for_setup_file "$gfnsvcdepsetup"
    [[ $G_BREAKOUT -eq 1 ]] && return

    echo "Creating servicedeps file $gfnsvcdepcfg"

    # Redirect all stdout output to contacts file
    exec 3>&1 >$gfnsvcdepcfg

    echo_warning_header

    while read a; do 
        [[ -z $a || $a == "#"* ]] && continue

        IFS=, read dephostname dephostgroupname depsvcdesc \
            hostname hostgroupname svcdesc inheritsparent \
            execfailcriteria notiffailcriteria period disable x \
            < <( echo "$a" )

        [[ "$disable" == "1" ]] && continue

        # Don't use execfailcriteria on a dcc
        [[ $DCC -eq 1 && -n "$execfailcriteria" && \
           -z "$notiffailcriteria" ]] && continue

        echo "define servicedependency {"
        if [[ -n $dephostname ]]; then
            echo "       dependent_host_name           $dephostname"
        else
            Echo "       dependent_hostgroup_name      $dephostgroupname"
        fi
        echo "       dependent_service_description $depsvcdesc"
        if [[ -n $hostname ]]; then
            echo "       host_name                     $hostname"
        else
            Echo "       hostgroup_name                $hostgroupname"
        fi
        echo "       service_description           $svcdesc"
        [[ -n $inheritsparent ]] && {
            if [[ $inheritsparent == 1 ]]; then
                echo "       inherits_parent               1"
            else
                echo "       inherits_parent               0"
            fi
        }
        [[ $DCC -ne 1 && -n $execfailcriteria ]] && {
            echo -n "       execution_failure_criteria    "
            echo "${execfailcriteria// /,}"
        }
        [[ -n $notiffailcriteria ]] && {
            echo -n "       notification_failure_criteria "
            echo "${notiffailcriteria// /,}"
        }
        [[ -n $period ]] && {
            Echo "       dependency_period             $period"
        }
        echo "}"
        echo

    done <$gfnsvcdepsetup

    # Un-redirect stdout output
    exec 1>&3 3>&-
}

# ---------------------------------------------------------------------------
create_hostdeps()
# ---------------------------------------------------------------------------
# Purpose:      Create servicedeps file ($gfnsvcdepcfg)
# Arguments:    None
# Returns:      Nothing
{
    local a name command disable

    check_for_setup_file "$gfnhostdepsetup"
    [[ $G_BREAKOUT -eq 1 ]] && return

    echo "Creating hostdeps file $gfnhostdepcfg"

    # Redirect all stdout output to contacts file
    exec 3>&1 >$gfnhostdepcfg

    echo_warning_header

    while read a; do 
        [[ -z $a || $a == "#"* ]] && continue

        IFS=, read dephostname dephostgroupname \
            hostname hostgroupname inheritsparent \
            execfailcriteria notiffailcriteria period disable x \
            < <( echo "$a" )

        [[ "$disable" == "1" ]] && continue

        echo "define servicedependency {"
        if [[ -n $dephostname ]]; then
            echo "       dependent_host_name           $dephostname"
        else
            Echo "       dependent_hostgroup_name      $dephostgroupname"
        fi
        if [[ -n $hostname ]]; then
            echo "       host_name                     $hostname"
        else
            Echo "       hostgroup_name                $hostgroupname"
        fi
        [[ -n $inheritsparent ]] && {
            if [[ $inheritsparent == 1 ]]; then
                echo "       inherits_parent               1"
            else
                echo "       inherits_parent               0"
            fi
        }
        [[ -n $execfailcriteria ]] && {
            echo -n "       execution_failure_criteria    "
            echo "${execfailcriteria// /,}"
        }
        [[ -n $notiffailcriteria ]] && {
            echo -n "       notification_failure_criteria "
            echo "${notiffailcriteria// /,}"
        }
        [[ -n $period ]] && {
            Echo "       dependency_period             $period"
        }
        echo "}"
        echo

    done <$gfnhostdepsetup

    # Un-redirect stdout output
    exec 1>&3 3>&-
}

# ---------------------------------------------------------------------------
create_serviceesc()
# ---------------------------------------------------------------------------
# Purpose:      Create serviceesc file ($gfnsvcesccfg)
# Arguments:    None
# Returns:      Nothing
{
    local a name command disable

    check_for_setup_file "$gfnsvcescsetup"
    [[ $G_BREAKOUT -eq 1 ]] && return

    echo "Creating serviceescalation file $gfnsvcesccfg"

    # Redirect all stdout output to contacts file
    exec 3>&1 >$gfnsvcesccfg

    echo_warning_header

    while read a; do 
        [[ -z $a || $a == "#"* ]] && continue

        IFS=, read hostname hostgroupname svcdesc contacts contactgroups \
            firstnotif lastnotif notifinterval period escopts disable x \
            < <( echo "$a" )

        [[ "$disable" == "1" ]] && continue

        echo "define serviceescalation {"
        if [[ -n $hostname ]]; then
            echo "       host_name            $hostname"
        else
            Echo "       hostgroup_name       $hostgroupname"
        fi
        echo "       service_description  $svcdesc"
        [[ -n $contacts ]] && {
            t="${contacts// /,}"
            Echo "       contacts             $t"
        }
        [[ -n $contactgroups ]] && {
            t="${contactgroups// /,}"
            Echo "       contact_groups       $t"
        }
        [[ -n $escopts ]] && {
            echo -n "       escalation_options   "
            echo "${escopts// /,}"
        }
        [[ -n $firstnotif ]] && {
            echo "       first_notification   $firstnotif"
        }
        [[ -n $lastnotif ]] && {
            echo "       last_notification    $lastnotif"
        }
        [[ -n $lastnotif ]] && {
            echo "       notification_interval $notifinterval"
        }
        [[ -n $period ]] && {
            Echo "       escalation_period     $period"
        }
        echo "}"
        echo

    done <$gfnsvcescsetup

    # Un-redirect stdout output
    exec 1>&3 3>&-
}

# ---------------------------------------------------------------------------
create_hostesc()
# ---------------------------------------------------------------------------
# Purpose:      Create servicedeps file ($gfnsvcdepcfg)
# Arguments:    None
# Returns:      Nothing
{
    local a name command disable

    check_for_setup_file "$gfnhostescsetup"
    [[ $G_BREAKOUT -eq 1 ]] && return

    echo "Creating hostescalation file $gfnhostesccfg"

    # Redirect all stdout output to contacts file
    exec 3>&1 >$gfnhostesccfg

    echo_warning_header

    while read a; do 
        [[ -z $a || $a == "#"* ]] && continue

        IFS=, read hostname hostgroupname contacts contactgroups \
            firstnotif lastnotif notifinterval period escopts disable x \
            < <( echo "$a" )

        [[ "$disable" == "1" ]] && continue

        echo "define serviceescalation {"
        if [[ -n $hostname ]]; then
            echo "       host_name            $hostname"
        else
            Echo "       hostgroup_name       $hostgroupname"
        fi
        [[ -n $contacts ]] && {
            t="${contacts// /,}"
            Echo "       contacts             $t"
        }
        [[ -n $contactgroups ]] && {
            t="${contactgroups// /,}"
            Echo "       contact_groups       $t"
        }
        [[ -n $escopts ]] && {
            echo -n "       escalation_options   "
            echo "${escopts// /,}"
        }
        [[ -n $firstnotif ]] && {
            echo "       first_notification   $firstnotif"
        }
        [[ -n $lastnotif ]] && {
            echo "       last_notification    $lastnotif"
        }
        [[ -n $lastnotif ]] && {
            echo "       notification_interval $notifinterval"
        }
        [[ -n $period ]] && {
            Echo "       escalation_period     $period"
        }
        echo "}"
        echo

    done <$gfnhostescsetup

    # Un-redirect stdout output
    exec 1>&3 3>&-
}

# ---------------------------------------------------------------------------
create_serviceext()
# ---------------------------------------------------------------------------
# Purpose:      Create servicedeps file ($gfnsvcdepcfg)
# Arguments:    None
# Returns:      Nothing
{
    local a name command disable

    check_for_setup_file "$gfnsvcextsetup"
    [[ $G_BREAKOUT -eq 1 ]] && return

    echo "Creating serviceextinfo file $gfnsvcextcfg"

    # Redirect all stdout output to contacts file
    exec 3>&1 >$gfnsvcextcfg

    echo_warning_header

    while read a; do 
        [[ -z $a || $a == "#"* ]] && continue

        IFS=, read hostname svcdesc notes notes_url action_url \
            icon_image icon_image_alt disable x \
            < <( echo "$a" )

        [[ "$disable" == "1" ]] && continue

        echo "define serviceextinfo {"
        [[ -n $hostname ]] && {
            echo "       host_name            $hostname"
        }
        [[ -n $svcdesc ]] && {
            echo "       service_description  $svcdesc"
        }
        [[ -n $notes ]] && {
            echo "       notes                $notes"
        }
        [[ -n $notes_url ]] && {
            echo "       notes_url            $notes_url"
        }
        [[ -n $action_url ]] && {
            echo "       action_url           $action_url"
        }
        [[ -n $icon_image ]] && {
            echo "       icon_image           $icon_image"
        }
        [[ -n $icon_image_alt ]] && {
            echo "       icon_image_alt       $icon_image_alt"
        }
        echo "}"
        echo

    done <$gfnsvcextsetup

    # Un-redirect stdout output
    exec 1>&3 3>&-
}

# ---------------------------------------------------------------------------
create_hostext()
# ---------------------------------------------------------------------------
# Purpose:      Create servicedeps file ($gfnsvcdepcfg)
# Arguments:    None
# Returns:      Nothing
{
    local a name command disable

    check_for_setup_file "$gfnhostextsetup"
    [[ $G_BREAKOUT -eq 1 ]] && return

    echo "Creating hostextinfo file $gfnhostextcfg"

    # Redirect all stdout output to contacts file
    exec 3>&1 >$gfnhostextcfg

    echo_warning_header

    while read a; do 
        [[ -z $a || $a == "#"* ]] && continue

        IFS=, read hostname notes notes_url action_url \
            icon_image icon_image_alt vrml_image statusmap_image \
            coords2d coords3d disable x \
            < <( echo "$a" )

        [[ "$disable" == "1" ]] && continue

        echo "define hostextinfo {"
        [[ -n $hostname ]] && {
            echo "       host_name            $hostname"
        }
        [[ -n $notes ]] && {
            echo "       notes                $notes"
        }
        [[ -n $notes_url ]] && {
            echo "       notes_url            $notes_url"
        }
        [[ -n $action_url ]] && {
            echo "       action_url           $action_url"
        }
        [[ -n $icon_image ]] && {
            echo "       icon_image           $icon_image"
        }
        [[ -n $icon_image_alt ]] && {
            echo "       icon_image_alt       $icon_image_alt"
        }
        [[ -n $vrml_image ]] && {
            echo "       vrml_image           $vrml_image"
        }
        [[ -n $statusmap_image ]] && {
            echo "       statusmap_image      $statusmap_image"
        }
        [[ -n $coords2d ]] && {
            echo "       2d_coords            $coords2d"
        }
        [[ -n $coords3d ]] && {
            echo "       3d_coords            $coords3d"
        }
        echo "}"
        echo

    done <$gfnhostextsetup

    # Un-redirect stdout output
    exec 1>&3 3>&-
}

# ---------------------------------------------------------------------------
create_file()
# ---------------------------------------------------------------------------
# Purpose:      Create config file(s) based on TYPE.
# Arguments:    None
# Returns:      Nothing
{
    case $gsetupfiletype in
        $FT_NONE) echo "ERROR. This can not happen."
                  exit 6
        ;;
        $FT_HOSTS) create_host_files
        ;;
        $FT_SERVICES) create_service_entries
        ;;
        $FT_HOSTTEMPLATES) create_hosttemplates
        ;;
        $FT_SERVICETEMPLATES) create_servicetemplates
        ;;
        $FT_CONTACTS) create_contacts
        ;;
        $FT_TIMEPERIODS) create_timeperiods
        ;;
        $FT_COMMANDS) create_commands
        ;;
        $FT_SERVICEDEPS) create_servicedeps
        ;;
        $FT_HOSTDEPS) create_hostdeps
        ;;
        $FT_SERVICEESC) create_serviceesc
        ;;
        $FT_HOSTESC) create_hostesc
        ;;
        $FT_SERVICEEXTINFO) create_serviceext
        ;;
        $FT_HOSTEXTINFO) create_hostext
        ;;
        $FT_ALL) echo "ERROR: YOU CANNOT BE SEEING THIS!"
                 exit 6
        ;;
    esac
}
 
# ---------------------------------------------------------------------------
start_writing_process()
# ---------------------------------------------------------------------------
# Purpose:      All config writing is fired off from here
# Arguments:    None
# Returns:      Nothing
{
    init_data

    sanity_check

    are_you_sure

    create_file
}

# ---------------------------------------------------------------------------
set_default_globals()
# ---------------------------------------------------------------------------
# Purpose:      Set some default values overridden by config file.
# Arguments:    None
# Returns:      Nothing
{
    REMOTE_EXECUTOR="check_any"
    FRESHNESS_CHECK_COMMAND="no-checks-received"
}

# ---------------------------------------------------------------------------
main()
# ---------------------------------------------------------------------------
# Purpose:      Program execution starts here.
# Arguments:    None
# Returns:      Nothing
{
    set_default_globals

    parse_options

    if [[ -r $CONFIG ]]; then
        source $CONFIG
        [[ -z $DCC ]] && {
            echo "ERROR: DCC variable is not set. Aborting."
            exit 1
        }
    else
        echo "ERROR: File does not exist, '$CONFIG'. Aborting"
        exit 1
    fi

    setup_name_mangling

    if [[ $gsetupfiletype -eq $FT_ALL ]]; then
        gsetupfiletype=$FT_HOSTS
        start_writing_process
        gsetupfiletype=$FT_SERVICES
        start_writing_process
        gsetupfiletype=$FT_HOSTTEMPLATES
        start_writing_process
        gsetupfiletype=$FT_SERVICETEMPLATES
        start_writing_process
        gsetupfiletype=$FT_TIMEPERIODS
        start_writing_process
        gsetupfiletype=$FT_COMMANDS
        start_writing_process
        [[ -e $gfncontactsetup ]] && {
            gsetupfiletype=$FT_CONTACTS
            start_writing_process
        }
        gsetupfiletype=$FT_SERVICEDEPS
        start_writing_process
        gsetupfiletype=$FT_HOSTDEPS
        start_writing_process
        gsetupfiletype=$FT_SERVICEESC
        start_writing_process
        gsetupfiletype=$FT_HOSTESC
        start_writing_process
        gsetupfiletype=$FT_SERVICEEXTINFO
        start_writing_process
        gsetupfiletype=$FT_HOSTEXTINFO
        start_writing_process
    else
        start_writing_process
    fi

    exit 0
}

# start...
main

# vim:ts=4:et:sw=4:tw=76
